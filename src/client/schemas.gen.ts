// This file is auto-generated by @hey-api/openapi-ts

export const AccountAchievementSchemaSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name',
            description: 'Name of the achievement.'
        },
        code: {
            type: 'string',
            title: 'Code',
            description: 'Code of the achievement. '
        },
        description: {
            type: 'string',
            title: 'Description',
            description: 'Description of the achievement.'
        },
        points: {
            type: 'integer',
            title: 'Points',
            description: 'Points of the achievement. Used for the leaderboard.'
        },
        type: {
            allOf: [
                {
                    '$ref': '#/components/schemas/AchievementType'
                }
            ],
            description: 'Type of achievement.'
        },
        target: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Target',
            description: 'Target of the achievement.'
        },
        total: {
            type: 'integer',
            title: 'Total',
            description: 'Total to do.'
        },
        rewards: {
            allOf: [
                {
                    '$ref': '#/components/schemas/AchievementRewardsSchema'
                }
            ],
            description: 'Rewards.'
        },
        current: {
            type: 'integer',
            title: 'Current',
            description: 'Current progress.'
        },
        completed_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Completed At',
            description: 'Completed at.'
        }
    },
    type: 'object',
    required: ['name', 'code', 'description', 'points', 'type', 'target', 'total', 'rewards', 'current', 'completed_at'],
    title: 'AccountAchievementSchema'
} as const;

export const AccountDetailsSchema = {
    properties: {
        username: {
            type: 'string',
            title: 'Username',
            description: 'Username.'
        },
        subscribed: {
            type: 'boolean',
            title: 'Subscribed',
            description: 'Subscribed for the current season.'
        },
        status: {
            allOf: [
                {
                    '$ref': '#/components/schemas/AccountStatus'
                }
            ],
            description: 'Member status.'
        },
        badges: {
            anyOf: [
                {
                    items: {},
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Badges',
            description: 'Account badges.'
        },
        achievements_points: {
            type: 'integer',
            title: 'Achievements Points',
            description: 'Achievement points.'
        },
        banned: {
            type: 'boolean',
            title: 'Banned',
            description: 'Banned.'
        },
        ban_reason: {
            type: 'string',
            title: 'Ban Reason',
            description: 'Ban reason.'
        }
    },
    type: 'object',
    required: ['username', 'subscribed', 'status', 'achievements_points', 'banned'],
    title: 'AccountDetails'
} as const;

export const AccountDetailsSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/AccountDetails'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'AccountDetailsSchema'
} as const;

export const AccountLeaderboardSchemaSchema = {
    properties: {
        position: {
            type: 'integer',
            title: 'Position',
            description: 'Position in the leaderboard.'
        },
        account: {
            type: 'string',
            title: 'Account',
            description: 'Account name.'
        },
        status: {
            allOf: [
                {
                    '$ref': '#/components/schemas/AccountStatus'
                }
            ],
            description: 'Member status.'
        },
        achievements_points: {
            type: 'integer',
            title: 'Achievements Points',
            description: 'Achievements points.'
        }
    },
    type: 'object',
    required: ['position', 'account', 'status', 'achievements_points'],
    title: 'AccountLeaderboardSchema'
} as const;

export const AccountLeaderboardTypeSchema = {
    type: 'string',
    const: 'achievements_points',
    title: 'AccountLeaderboardType'
} as const;

export const AccountLeaderboardType_a_zA_Z0_9_______Schema = {
    '$ref': '#/components/schemas/AccountLeaderboardType'
} as const;

export const AccountStatusSchema = {
    type: 'string',
    enum: ['standard', 'founder', 'gold_founder', 'vip_founder'],
    title: 'AccountStatus'
} as const;

export const AchievementResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/AchievementSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'AchievementResponseSchema'
} as const;

export const AchievementRewardsSchemaSchema = {
    properties: {
        gold: {
            type: 'integer',
            title: 'Gold',
            description: 'Gold rewards.'
        }
    },
    type: 'object',
    required: ['gold'],
    title: 'AchievementRewardsSchema'
} as const;

export const AchievementSchemaSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name',
            description: 'Name of the achievement.'
        },
        code: {
            type: 'string',
            title: 'Code',
            description: 'Code of the achievement. '
        },
        description: {
            type: 'string',
            title: 'Description',
            description: 'Description of the achievement.'
        },
        points: {
            type: 'integer',
            title: 'Points',
            description: 'Points of the achievement. Used for the leaderboard.'
        },
        type: {
            allOf: [
                {
                    '$ref': '#/components/schemas/AchievementType'
                }
            ],
            description: 'Type of achievement.'
        },
        target: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Target',
            description: 'Target of the achievement.'
        },
        total: {
            type: 'integer',
            title: 'Total',
            description: 'Total to do.'
        },
        rewards: {
            allOf: [
                {
                    '$ref': '#/components/schemas/AchievementRewardsSchema'
                }
            ],
            description: 'Rewards.'
        }
    },
    type: 'object',
    required: ['name', 'code', 'description', 'points', 'type', 'target', 'total', 'rewards'],
    title: 'AchievementSchema'
} as const;

export const AchievementTypeSchema = {
    type: 'string',
    enum: ['combat_kill', 'combat_drop', 'combat_level', 'gathering', 'crafting', 'recycling', 'task', 'other'],
    title: 'AchievementType'
} as const;

export const AchievementType_a_zA_Z0_9_______Schema = {
    '$ref': '#/components/schemas/AchievementType'
} as const;

export const ActionTypeSchema = {
    type: 'string',
    enum: ['movement', 'fight', 'crafting', 'gathering', 'buy_ge', 'sell_ge', 'cancel_ge', 'delete_item', 'deposit', 'withdraw', 'deposit_gold', 'withdraw_gold', 'equip', 'unequip', 'task', 'recycling', 'rest', 'use', 'buy_bank_expansion'],
    title: 'ActionType'
} as const;

export const ActiveEventSchemaSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name',
            description: 'Name of the event.'
        },
        code: {
            type: 'string',
            title: 'Code',
            description: "Code of the event. This is the event's unique identifier (ID)."
        },
        map: {
            allOf: [
                {
                    '$ref': '#/components/schemas/MapSchema'
                }
            ],
            description: 'Map of the event.'
        },
        previous_skin: {
            type: 'string',
            title: 'Previous Skin',
            description: 'Previous map skin.'
        },
        duration: {
            type: 'integer',
            title: 'Duration',
            description: 'Duration in minutes.'
        },
        expiration: {
            type: 'string',
            format: 'date-time',
            title: 'Expiration',
            description: 'Expiration datetime.'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At',
            description: 'Start datetime.'
        }
    },
    type: 'object',
    required: ['name', 'code', 'map', 'previous_skin', 'duration', 'expiration', 'created_at'],
    title: 'ActiveEventSchema'
} as const;

export const AddAccountSchemaSchema = {
    properties: {
        username: {
            type: 'string',
            maxLength: 32,
            minLength: 6,
            pattern: '^[a-zA-Z0-9_-]+$',
            title: 'Username',
            description: 'Your desired username.'
        },
        password: {
            type: 'string',
            maxLength: 50,
            minLength: 5,
            pattern: '^[^\\s]+$',
            title: 'Password',
            description: 'Your password.'
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'AddAccountSchema'
} as const;

export const AddCharacterSchemaSchema = {
    properties: {
        name: {
            type: 'string',
            maxLength: 12,
            minLength: 3,
            pattern: '^[a-zA-Z0-9_-]+$',
            title: 'Name',
            description: "Your desired character name. It's unique and all players can see it."
        },
        skin: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CharacterSkin'
                }
            ],
            description: 'Your desired skin.'
        }
    },
    type: 'object',
    required: ['name', 'skin'],
    title: 'AddCharacterSchema'
} as const;

export const AnnouncementSchemaSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message',
            description: 'Announcement text.'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At',
            description: 'Datetime of the announcement.'
        }
    },
    type: 'object',
    required: ['message'],
    title: 'AnnouncementSchema'
} as const;

export const BankExtensionSchemaSchema = {
    properties: {
        price: {
            type: 'integer',
            minimum: 0,
            title: 'Price',
            description: 'Price of the bank extension.'
        }
    },
    type: 'object',
    required: ['price'],
    title: 'BankExtensionSchema'
} as const;

export const BankExtensionTransactionResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/BankExtensionTransactionSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'BankExtensionTransactionResponseSchema'
} as const;

export const BankExtensionTransactionSchemaSchema = {
    properties: {
        cooldown: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CooldownSchema'
                }
            ],
            description: 'Cooldown details.'
        },
        transaction: {
            allOf: [
                {
                    '$ref': '#/components/schemas/BankExtensionSchema'
                }
            ],
            description: 'Transaction details.'
        },
        character: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CharacterSchema'
                }
            ],
            description: 'Player details.'
        }
    },
    type: 'object',
    required: ['cooldown', 'transaction', 'character'],
    title: 'BankExtensionTransactionSchema'
} as const;

export const BankGoldTransactionResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/BankGoldTransactionSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'BankGoldTransactionResponseSchema'
} as const;

export const BankGoldTransactionSchemaSchema = {
    properties: {
        cooldown: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CooldownSchema'
                }
            ],
            description: 'Cooldown details.'
        },
        bank: {
            allOf: [
                {
                    '$ref': '#/components/schemas/GoldSchema'
                }
            ],
            description: 'Bank details.'
        },
        character: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CharacterSchema'
                }
            ],
            description: 'Player details.'
        }
    },
    type: 'object',
    required: ['cooldown', 'bank', 'character'],
    title: 'BankGoldTransactionSchema'
} as const;

export const BankItemTransactionResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/BankItemTransactionSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'BankItemTransactionResponseSchema'
} as const;

export const BankItemTransactionSchemaSchema = {
    properties: {
        cooldown: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CooldownSchema'
                }
            ],
            description: 'Cooldown details.'
        },
        item: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ItemSchema'
                }
            ],
            description: 'Item details.'
        },
        bank: {
            items: {
                '$ref': '#/components/schemas/SimpleItemSchema'
            },
            type: 'array',
            title: 'Bank',
            description: 'Items in your banks.'
        },
        character: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CharacterSchema'
                }
            ],
            description: 'Player details.'
        }
    },
    type: 'object',
    required: ['cooldown', 'item', 'bank', 'character'],
    title: 'BankItemTransactionSchema'
} as const;

export const BankResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/BankSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'BankResponseSchema'
} as const;

export const BankSchemaSchema = {
    properties: {
        slots: {
            type: 'integer',
            minimum: 0,
            title: 'Slots',
            description: 'Maximum slots in your bank.'
        },
        expansions: {
            type: 'integer',
            minimum: 0,
            title: 'Expansions',
            description: 'Bank expansions.'
        },
        next_expansion_cost: {
            type: 'integer',
            minimum: 0,
            title: 'Next Expansion Cost',
            description: 'Next expansion cost.'
        },
        gold: {
            type: 'integer',
            minimum: 0,
            title: 'Gold',
            description: 'Quantity of gold in your bank.'
        }
    },
    type: 'object',
    required: ['slots', 'expansions', 'next_expansion_cost', 'gold'],
    title: 'BankSchema'
} as const;

export const BlockedHitsSchemaSchema = {
    properties: {
        fire: {
            type: 'integer',
            title: 'Fire',
            description: 'The amount of fire hits blocked.'
        },
        earth: {
            type: 'integer',
            title: 'Earth',
            description: 'The amount of earth hits blocked.'
        },
        water: {
            type: 'integer',
            title: 'Water',
            description: 'The amount of water hits blocked.'
        },
        air: {
            type: 'integer',
            title: 'Air',
            description: 'The amount of air hits blocked.'
        },
        total: {
            type: 'integer',
            title: 'Total',
            description: 'The amount of total hits blocked.'
        }
    },
    type: 'object',
    required: ['fire', 'earth', 'water', 'air', 'total'],
    title: 'BlockedHitsSchema'
} as const;

export const ChangePasswordSchema = {
    properties: {
        current_password: {
            type: 'string',
            maxLength: 50,
            minLength: 5,
            pattern: '^[^\\s]+$',
            title: 'Current Password',
            description: 'Your password.'
        },
        new_password: {
            type: 'string',
            maxLength: 50,
            minLength: 5,
            pattern: '^[^\\s]+$',
            title: 'New Password',
            description: 'New password.'
        }
    },
    type: 'object',
    required: ['current_password', 'new_password'],
    title: 'ChangePassword'
} as const;

export const CharacterFightDataSchemaSchema = {
    properties: {
        cooldown: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CooldownSchema'
                }
            ],
            description: 'Cooldown details.'
        },
        fight: {
            allOf: [
                {
                    '$ref': '#/components/schemas/FightSchema'
                }
            ],
            description: 'Fight details.'
        },
        character: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CharacterSchema'
                }
            ],
            description: 'Player details.'
        }
    },
    type: 'object',
    required: ['cooldown', 'fight', 'character'],
    title: 'CharacterFightDataSchema'
} as const;

export const CharacterFightResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/CharacterFightDataSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'CharacterFightResponseSchema'
} as const;

export const CharacterLeaderboardSchemaSchema = {
    properties: {
        position: {
            type: 'integer',
            title: 'Position',
            description: 'Position in the leaderboard.'
        },
        name: {
            type: 'string',
            title: 'Name',
            description: 'Character name.'
        },
        account: {
            type: 'string',
            title: 'Account',
            description: 'Account name.'
        },
        skin: {
            type: 'string',
            title: 'Skin',
            description: 'Character skin code.'
        },
        level: {
            type: 'integer',
            title: 'Level',
            description: 'Combat level.'
        },
        total_xp: {
            type: 'integer',
            title: 'Total Xp',
            description: 'Total XP of your character.'
        },
        mining_level: {
            type: 'integer',
            title: 'Mining Level',
            description: 'Mining level.'
        },
        mining_total_xp: {
            type: 'integer',
            title: 'Mining Total Xp',
            description: 'Mining total xp.'
        },
        woodcutting_level: {
            type: 'integer',
            title: 'Woodcutting Level',
            description: 'Woodcutting level.'
        },
        woodcutting_total_xp: {
            type: 'integer',
            title: 'Woodcutting Total Xp',
            description: 'Woodcutting total xp.'
        },
        fishing_level: {
            type: 'integer',
            title: 'Fishing Level',
            description: 'Fishing level.'
        },
        fishing_total_xp: {
            type: 'integer',
            title: 'Fishing Total Xp',
            description: 'Fishing total xp.'
        },
        weaponcrafting_level: {
            type: 'integer',
            title: 'Weaponcrafting Level',
            description: 'Weaponcrafting level.'
        },
        weaponcrafting_total_xp: {
            type: 'integer',
            title: 'Weaponcrafting Total Xp',
            description: 'Weaponcrafting total xp.'
        },
        gearcrafting_level: {
            type: 'integer',
            title: 'Gearcrafting Level',
            description: 'Gearcrafting level.'
        },
        gearcrafting_total_xp: {
            type: 'integer',
            title: 'Gearcrafting Total Xp',
            description: 'Gearcrafting total xp.'
        },
        jewelrycrafting_level: {
            type: 'integer',
            title: 'Jewelrycrafting Level',
            description: 'Jewelrycrafting level.'
        },
        jewelrycrafting_total_xp: {
            type: 'integer',
            title: 'Jewelrycrafting Total Xp',
            description: 'Jewelrycrafting total xp.'
        },
        cooking_level: {
            type: 'integer',
            title: 'Cooking Level',
            description: 'Cooking level.'
        },
        cooking_total_xp: {
            type: 'integer',
            title: 'Cooking Total Xp',
            description: 'Cooking total xp.'
        },
        alchemy_level: {
            type: 'integer',
            title: 'Alchemy Level',
            description: 'Alchemy level.'
        },
        alchemy_total_xp: {
            type: 'integer',
            title: 'Alchemy Total Xp',
            description: 'Alchemy total xp.'
        },
        gold: {
            type: 'integer',
            title: 'Gold',
            description: 'The numbers of gold on this character.'
        }
    },
    type: 'object',
    required: ['position', 'name', 'account', 'skin', 'level', 'total_xp', 'mining_level', 'mining_total_xp', 'woodcutting_level', 'woodcutting_total_xp', 'fishing_level', 'fishing_total_xp', 'weaponcrafting_level', 'weaponcrafting_total_xp', 'gearcrafting_level', 'gearcrafting_total_xp', 'jewelrycrafting_level', 'jewelrycrafting_total_xp', 'cooking_level', 'cooking_total_xp', 'alchemy_level', 'alchemy_total_xp', 'gold'],
    title: 'CharacterLeaderboardSchema'
} as const;

export const CharacterLeaderboardTypeSchema = {
    type: 'string',
    enum: ['combat', 'woodcutting', 'mining', 'fishing', 'weaponcrafting', 'gearcrafting', 'jewelrycrafting', 'cooking', 'alchemy', 'gold'],
    title: 'CharacterLeaderboardType'
} as const;

export const CharacterLeaderboardType_a_zA_Z0_9_______Schema = {
    '$ref': '#/components/schemas/CharacterLeaderboardType'
} as const;

export const CharacterMovementDataSchemaSchema = {
    properties: {
        cooldown: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CooldownSchema'
                }
            ],
            description: 'Cooldown details'
        },
        destination: {
            allOf: [
                {
                    '$ref': '#/components/schemas/MapSchema'
                }
            ],
            description: 'Destination details.'
        },
        character: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CharacterSchema'
                }
            ],
            description: 'Character details.'
        }
    },
    type: 'object',
    required: ['cooldown', 'destination', 'character'],
    title: 'CharacterMovementDataSchema'
} as const;

export const CharacterMovementResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/CharacterMovementDataSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'CharacterMovementResponseSchema'
} as const;

export const CharacterResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/CharacterSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'CharacterResponseSchema'
} as const;

export const CharacterRestDataSchemaSchema = {
    properties: {
        cooldown: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CooldownSchema'
                }
            ],
            description: 'Cooldown details'
        },
        hp_restored: {
            type: 'integer',
            title: 'Hp Restored',
            description: 'The amount of HP restored.'
        },
        character: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CharacterSchema'
                }
            ],
            description: 'Character details.'
        }
    },
    type: 'object',
    required: ['cooldown', 'hp_restored', 'character'],
    title: 'CharacterRestDataSchema'
} as const;

export const CharacterRestResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/CharacterRestDataSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'CharacterRestResponseSchema'
} as const;

export const CharacterSchemaSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name',
            description: 'Name of the character.'
        },
        account: {
            type: 'string',
            title: 'Account',
            description: 'Account name.'
        },
        skin: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CharacterSkin'
                }
            ],
            description: 'Character skin code.'
        },
        level: {
            type: 'integer',
            title: 'Level',
            description: 'Combat level.'
        },
        xp: {
            type: 'integer',
            title: 'Xp',
            description: 'The current xp level of the combat level.'
        },
        max_xp: {
            type: 'integer',
            title: 'Max Xp',
            description: 'XP required to level up the character.'
        },
        gold: {
            type: 'integer',
            title: 'Gold',
            description: 'The numbers of gold on this character.'
        },
        speed: {
            type: 'integer',
            title: 'Speed',
            description: '*Not available, on the roadmap. Character movement speed.'
        },
        mining_level: {
            type: 'integer',
            title: 'Mining Level',
            description: 'Mining level.'
        },
        mining_xp: {
            type: 'integer',
            title: 'Mining Xp',
            description: 'The current xp level of the Mining skill.'
        },
        mining_max_xp: {
            type: 'integer',
            title: 'Mining Max Xp',
            description: 'Mining XP required to level up the skill.'
        },
        woodcutting_level: {
            type: 'integer',
            title: 'Woodcutting Level',
            description: 'Woodcutting level.'
        },
        woodcutting_xp: {
            type: 'integer',
            title: 'Woodcutting Xp',
            description: 'The current xp level of the Woodcutting skill.'
        },
        woodcutting_max_xp: {
            type: 'integer',
            title: 'Woodcutting Max Xp',
            description: 'Woodcutting XP required to level up the skill.'
        },
        fishing_level: {
            type: 'integer',
            title: 'Fishing Level',
            description: 'Fishing level.'
        },
        fishing_xp: {
            type: 'integer',
            title: 'Fishing Xp',
            description: 'The current xp level of the Fishing skill.'
        },
        fishing_max_xp: {
            type: 'integer',
            title: 'Fishing Max Xp',
            description: 'Fishing XP required to level up the skill.'
        },
        weaponcrafting_level: {
            type: 'integer',
            title: 'Weaponcrafting Level',
            description: 'Weaponcrafting level.'
        },
        weaponcrafting_xp: {
            type: 'integer',
            title: 'Weaponcrafting Xp',
            description: 'The current xp level of the Weaponcrafting skill.'
        },
        weaponcrafting_max_xp: {
            type: 'integer',
            title: 'Weaponcrafting Max Xp',
            description: 'Weaponcrafting XP required to level up the skill.'
        },
        gearcrafting_level: {
            type: 'integer',
            title: 'Gearcrafting Level',
            description: 'Gearcrafting level.'
        },
        gearcrafting_xp: {
            type: 'integer',
            title: 'Gearcrafting Xp',
            description: 'The current xp level of the Gearcrafting skill.'
        },
        gearcrafting_max_xp: {
            type: 'integer',
            title: 'Gearcrafting Max Xp',
            description: 'Gearcrafting XP required to level up the skill.'
        },
        jewelrycrafting_level: {
            type: 'integer',
            title: 'Jewelrycrafting Level',
            description: 'Jewelrycrafting level.'
        },
        jewelrycrafting_xp: {
            type: 'integer',
            title: 'Jewelrycrafting Xp',
            description: 'The current xp level of the Jewelrycrafting skill.'
        },
        jewelrycrafting_max_xp: {
            type: 'integer',
            title: 'Jewelrycrafting Max Xp',
            description: 'Jewelrycrafting XP required to level up the skill.'
        },
        cooking_level: {
            type: 'integer',
            title: 'Cooking Level',
            description: 'The current xp level of the Cooking skill.'
        },
        cooking_xp: {
            type: 'integer',
            title: 'Cooking Xp',
            description: 'Cooking XP.'
        },
        cooking_max_xp: {
            type: 'integer',
            title: 'Cooking Max Xp',
            description: 'Cooking XP required to level up the skill.'
        },
        alchemy_level: {
            type: 'integer',
            title: 'Alchemy Level',
            description: 'Alchemy level.'
        },
        alchemy_xp: {
            type: 'integer',
            title: 'Alchemy Xp',
            description: 'Alchemy XP.'
        },
        alchemy_max_xp: {
            type: 'integer',
            title: 'Alchemy Max Xp',
            description: 'Alchemy XP required to level up the skill.'
        },
        hp: {
            type: 'integer',
            title: 'Hp',
            description: 'Character actual HP.'
        },
        max_hp: {
            type: 'integer',
            title: 'Max Hp',
            description: 'Character max HP.'
        },
        haste: {
            type: 'integer',
            title: 'Haste',
            description: '*Character Haste. Increase speed attack (reduce fight cooldown)'
        },
        critical_strike: {
            type: 'integer',
            title: 'Critical Strike',
            description: "*Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the attack's damage."
        },
        stamina: {
            type: 'integer',
            title: 'Stamina',
            description: '*Not available, on the roadmap. Regenerates life at the start of each turn.'
        },
        attack_fire: {
            type: 'integer',
            title: 'Attack Fire',
            description: 'Fire attack.'
        },
        attack_earth: {
            type: 'integer',
            title: 'Attack Earth',
            description: 'Earth attack.'
        },
        attack_water: {
            type: 'integer',
            title: 'Attack Water',
            description: 'Water attack.'
        },
        attack_air: {
            type: 'integer',
            title: 'Attack Air',
            description: 'Air attack.'
        },
        dmg_fire: {
            type: 'integer',
            title: 'Dmg Fire',
            description: '% Fire damage.'
        },
        dmg_earth: {
            type: 'integer',
            title: 'Dmg Earth',
            description: '% Earth damage.'
        },
        dmg_water: {
            type: 'integer',
            title: 'Dmg Water',
            description: '% Water damage.'
        },
        dmg_air: {
            type: 'integer',
            title: 'Dmg Air',
            description: '% Air damage.'
        },
        res_fire: {
            type: 'integer',
            title: 'Res Fire',
            description: '% Fire resistance.'
        },
        res_earth: {
            type: 'integer',
            title: 'Res Earth',
            description: '% Earth resistance.'
        },
        res_water: {
            type: 'integer',
            title: 'Res Water',
            description: '% Water resistance.'
        },
        res_air: {
            type: 'integer',
            title: 'Res Air',
            description: '% Air resistance.'
        },
        x: {
            type: 'integer',
            title: 'X',
            description: 'Character x coordinate.'
        },
        y: {
            type: 'integer',
            title: 'Y',
            description: 'Character y coordinate.'
        },
        cooldown: {
            type: 'integer',
            title: 'Cooldown',
            description: 'Cooldown in seconds.'
        },
        cooldown_expiration: {
            type: 'string',
            format: 'date-time',
            title: 'Cooldown Expiration',
            description: 'Datetime Cooldown expiration.'
        },
        weapon_slot: {
            type: 'string',
            title: 'Weapon Slot',
            description: 'Weapon slot.'
        },
        shield_slot: {
            type: 'string',
            title: 'Shield Slot',
            description: 'Shield slot.'
        },
        helmet_slot: {
            type: 'string',
            title: 'Helmet Slot',
            description: 'Helmet slot.'
        },
        body_armor_slot: {
            type: 'string',
            title: 'Body Armor Slot',
            description: 'Body armor slot.'
        },
        leg_armor_slot: {
            type: 'string',
            title: 'Leg Armor Slot',
            description: 'Leg armor slot.'
        },
        boots_slot: {
            type: 'string',
            title: 'Boots Slot',
            description: 'Boots slot.'
        },
        ring1_slot: {
            type: 'string',
            title: 'Ring1 Slot',
            description: 'Ring 1 slot.'
        },
        ring2_slot: {
            type: 'string',
            title: 'Ring2 Slot',
            description: 'Ring 2 slot.'
        },
        amulet_slot: {
            type: 'string',
            title: 'Amulet Slot',
            description: 'Amulet slot.'
        },
        artifact1_slot: {
            type: 'string',
            title: 'Artifact1 Slot',
            description: 'Artifact 1 slot.'
        },
        artifact2_slot: {
            type: 'string',
            title: 'Artifact2 Slot',
            description: 'Artifact 2 slot.'
        },
        artifact3_slot: {
            type: 'string',
            title: 'Artifact3 Slot',
            description: 'Artifact 3 slot.'
        },
        utility1_slot: {
            type: 'string',
            title: 'Utility1 Slot',
            description: 'Utility 1 slot.'
        },
        utility1_slot_quantity: {
            type: 'integer',
            minimum: 0,
            title: 'Utility1 Slot Quantity',
            description: 'Utility 1 quantity.'
        },
        utility2_slot: {
            type: 'string',
            title: 'Utility2 Slot',
            description: 'Utility 2 slot.'
        },
        utility2_slot_quantity: {
            type: 'integer',
            minimum: 0,
            title: 'Utility2 Slot Quantity',
            description: 'Utility 2 quantity.'
        },
        task: {
            type: 'string',
            title: 'Task',
            description: 'Task in progress.'
        },
        task_type: {
            type: 'string',
            title: 'Task Type',
            description: 'Task type.'
        },
        task_progress: {
            type: 'integer',
            title: 'Task Progress',
            description: 'Task progression.'
        },
        task_total: {
            type: 'integer',
            title: 'Task Total',
            description: 'Task total objective.'
        },
        inventory_max_items: {
            type: 'integer',
            title: 'Inventory Max Items',
            description: 'Inventory max items.'
        },
        inventory: {
            items: {
                '$ref': '#/components/schemas/InventorySlot'
            },
            type: 'array',
            title: 'Inventory',
            description: 'List of inventory slots.'
        }
    },
    type: 'object',
    required: ['name', 'account', 'skin', 'level', 'xp', 'max_xp', 'gold', 'speed', 'mining_level', 'mining_xp', 'mining_max_xp', 'woodcutting_level', 'woodcutting_xp', 'woodcutting_max_xp', 'fishing_level', 'fishing_xp', 'fishing_max_xp', 'weaponcrafting_level', 'weaponcrafting_xp', 'weaponcrafting_max_xp', 'gearcrafting_level', 'gearcrafting_xp', 'gearcrafting_max_xp', 'jewelrycrafting_level', 'jewelrycrafting_xp', 'jewelrycrafting_max_xp', 'cooking_level', 'cooking_xp', 'cooking_max_xp', 'alchemy_level', 'alchemy_xp', 'alchemy_max_xp', 'hp', 'max_hp', 'haste', 'critical_strike', 'stamina', 'attack_fire', 'attack_earth', 'attack_water', 'attack_air', 'dmg_fire', 'dmg_earth', 'dmg_water', 'dmg_air', 'res_fire', 'res_earth', 'res_water', 'res_air', 'x', 'y', 'cooldown', 'weapon_slot', 'shield_slot', 'helmet_slot', 'body_armor_slot', 'leg_armor_slot', 'boots_slot', 'ring1_slot', 'ring2_slot', 'amulet_slot', 'artifact1_slot', 'artifact2_slot', 'artifact3_slot', 'utility1_slot', 'utility1_slot_quantity', 'utility2_slot', 'utility2_slot_quantity', 'task', 'task_type', 'task_progress', 'task_total', 'inventory_max_items'],
    title: 'CharacterSchema'
} as const;

export const CharacterSkinSchema = {
    type: 'string',
    enum: ['men1', 'men2', 'men3', 'women1', 'women2', 'women3'],
    title: 'CharacterSkin'
} as const;

export const CooldownSchemaSchema = {
    properties: {
        total_seconds: {
            type: 'integer',
            title: 'Total Seconds',
            description: 'The total seconds of the cooldown.'
        },
        remaining_seconds: {
            type: 'integer',
            title: 'Remaining Seconds',
            description: 'The remaining seconds of the cooldown.'
        },
        started_at: {
            type: 'string',
            format: 'date-time',
            title: 'Started At',
            description: 'The start of the cooldown.'
        },
        expiration: {
            type: 'string',
            format: 'date-time',
            title: 'Expiration',
            description: 'The expiration of the cooldown.'
        },
        reason: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ActionType'
                }
            ],
            description: 'The reason of the cooldown.'
        }
    },
    type: 'object',
    required: ['total_seconds', 'remaining_seconds', 'started_at', 'expiration', 'reason'],
    title: 'CooldownSchema'
} as const;

export const CraftSchemaSchema = {
    properties: {
        skill: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CraftSkill'
                }
            ],
            title: 'Skill code',
            description: 'Skill required to craft the item.'
        },
        level: {
            type: 'integer',
            title: 'Level',
            description: 'The skill level required to craft the item.'
        },
        items: {
            items: {
                '$ref': '#/components/schemas/SimpleItemSchema'
            },
            type: 'array',
            title: 'Items',
            description: 'List of items required to craft the item.'
        },
        quantity: {
            type: 'integer',
            title: 'Quantity',
            description: 'Quantity of items crafted.'
        }
    },
    type: 'object',
    title: 'CraftSchema'
} as const;

export const CraftSkillSchema = {
    type: 'string',
    enum: ['weaponcrafting', 'gearcrafting', 'jewelrycrafting', 'cooking', 'woodcutting', 'mining', 'alchemy'],
    title: 'CraftSkill'
} as const;

export const CraftSkill_a_zA_Z0_9_______Schema = {
    '$ref': '#/components/schemas/CraftSkill'
} as const;

export const CraftingSchemaSchema = {
    properties: {
        code: {
            type: 'string',
            pattern: '^[a-zA-Z0-9_-]+$',
            title: 'Craft code',
            description: 'Craft code.'
        },
        quantity: {
            type: 'integer',
            minimum: 1,
            title: 'Quantity',
            description: 'Quantity of items to craft.',
            default: 1
        }
    },
    type: 'object',
    required: ['code'],
    title: 'CraftingSchema'
} as const;

export const DataPage_AccountAchievementSchema_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/AccountAchievementSchema'
            },
            type: 'array',
            title: 'Data'
        },
        total: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total'
        },
        page: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Page'
        },
        size: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Size'
        },
        pages: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pages'
        }
    },
    type: 'object',
    required: ['data', 'total', 'page', 'size'],
    title: 'DataPage[AccountAchievementSchema]'
} as const;

export const DataPage_AccountLeaderboardSchema_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/AccountLeaderboardSchema'
            },
            type: 'array',
            title: 'Data'
        },
        total: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total'
        },
        page: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Page'
        },
        size: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Size'
        },
        pages: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pages'
        }
    },
    type: 'object',
    required: ['data', 'total', 'page', 'size'],
    title: 'DataPage[AccountLeaderboardSchema]'
} as const;

export const DataPage_AchievementSchema_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/AchievementSchema'
            },
            type: 'array',
            title: 'Data'
        },
        total: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total'
        },
        page: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Page'
        },
        size: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Size'
        },
        pages: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pages'
        }
    },
    type: 'object',
    required: ['data', 'total', 'page', 'size'],
    title: 'DataPage[AchievementSchema]'
} as const;

export const DataPage_ActiveEventSchema_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/ActiveEventSchema'
            },
            type: 'array',
            title: 'Data'
        },
        total: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total'
        },
        page: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Page'
        },
        size: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Size'
        },
        pages: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pages'
        }
    },
    type: 'object',
    required: ['data', 'total', 'page', 'size'],
    title: 'DataPage[ActiveEventSchema]'
} as const;

export const DataPage_CharacterLeaderboardSchema_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/CharacterLeaderboardSchema'
            },
            type: 'array',
            title: 'Data'
        },
        total: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total'
        },
        page: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Page'
        },
        size: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Size'
        },
        pages: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pages'
        }
    },
    type: 'object',
    required: ['data', 'total', 'page', 'size'],
    title: 'DataPage[CharacterLeaderboardSchema]'
} as const;

export const DataPage_DropRateSchema_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/DropRateSchema'
            },
            type: 'array',
            title: 'Data'
        },
        total: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total'
        },
        page: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Page'
        },
        size: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Size'
        },
        pages: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pages'
        }
    },
    type: 'object',
    required: ['data', 'total', 'page', 'size'],
    title: 'DataPage[DropRateSchema]'
} as const;

export const DataPage_EventSchema_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/EventSchema'
            },
            type: 'array',
            title: 'Data'
        },
        total: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total'
        },
        page: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Page'
        },
        size: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Size'
        },
        pages: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pages'
        }
    },
    type: 'object',
    required: ['data', 'total', 'page', 'size'],
    title: 'DataPage[EventSchema]'
} as const;

export const DataPage_GEOrderSchema_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/GEOrderSchema'
            },
            type: 'array',
            title: 'Data'
        },
        total: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total'
        },
        page: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Page'
        },
        size: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Size'
        },
        pages: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pages'
        }
    },
    type: 'object',
    required: ['data', 'total', 'page', 'size'],
    title: 'DataPage[GEOrderSchema]'
} as const;

export const DataPage_GeOrderHistorySchema_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/GeOrderHistorySchema'
            },
            type: 'array',
            title: 'Data'
        },
        total: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total'
        },
        page: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Page'
        },
        size: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Size'
        },
        pages: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pages'
        }
    },
    type: 'object',
    required: ['data', 'total', 'page', 'size'],
    title: 'DataPage[GeOrderHistorySchema]'
} as const;

export const DataPage_ItemSchema_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/ItemSchema'
            },
            type: 'array',
            title: 'Data'
        },
        total: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total'
        },
        page: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Page'
        },
        size: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Size'
        },
        pages: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pages'
        }
    },
    type: 'object',
    required: ['data', 'total', 'page', 'size'],
    title: 'DataPage[ItemSchema]'
} as const;

export const DataPage_LogSchema_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/LogSchema'
            },
            type: 'array',
            title: 'Data'
        },
        total: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total'
        },
        page: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Page'
        },
        size: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Size'
        },
        pages: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pages'
        }
    },
    type: 'object',
    required: ['data', 'total', 'page', 'size'],
    title: 'DataPage[LogSchema]'
} as const;

export const DataPage_MapSchema_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/MapSchema'
            },
            type: 'array',
            title: 'Data'
        },
        total: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total'
        },
        page: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Page'
        },
        size: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Size'
        },
        pages: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pages'
        }
    },
    type: 'object',
    required: ['data', 'total', 'page', 'size'],
    title: 'DataPage[MapSchema]'
} as const;

export const DataPage_MonsterSchema_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/MonsterSchema'
            },
            type: 'array',
            title: 'Data'
        },
        total: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total'
        },
        page: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Page'
        },
        size: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Size'
        },
        pages: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pages'
        }
    },
    type: 'object',
    required: ['data', 'total', 'page', 'size'],
    title: 'DataPage[MonsterSchema]'
} as const;

export const DataPage_ResourceSchema_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/ResourceSchema'
            },
            type: 'array',
            title: 'Data'
        },
        total: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total'
        },
        page: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Page'
        },
        size: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Size'
        },
        pages: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pages'
        }
    },
    type: 'object',
    required: ['data', 'total', 'page', 'size'],
    title: 'DataPage[ResourceSchema]'
} as const;

export const DataPage_SimpleItemSchema_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/SimpleItemSchema'
            },
            type: 'array',
            title: 'Data'
        },
        total: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total'
        },
        page: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Page'
        },
        size: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Size'
        },
        pages: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pages'
        }
    },
    type: 'object',
    required: ['data', 'total', 'page', 'size'],
    title: 'DataPage[SimpleItemSchema]'
} as const;

export const DataPage_TaskFullSchema_Schema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/TaskFullSchema'
            },
            type: 'array',
            title: 'Data'
        },
        total: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total'
        },
        page: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Page'
        },
        size: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 1
                },
                {
                    type: 'null'
                }
            ],
            title: 'Size'
        },
        pages: {
            anyOf: [
                {
                    type: 'integer',
                    minimum: 0
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pages'
        }
    },
    type: 'object',
    required: ['data', 'total', 'page', 'size'],
    title: 'DataPage[TaskFullSchema]'
} as const;

export const DeleteCharacterSchemaSchema = {
    properties: {
        name: {
            type: 'string',
            maxLength: 12,
            minLength: 3,
            pattern: '^[a-zA-Z0-9_-]+$',
            title: 'Name',
            description: 'Character name.'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'DeleteCharacterSchema'
} as const;

export const DeleteItemResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/DeleteItemSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'DeleteItemResponseSchema'
} as const;

export const DeleteItemSchemaSchema = {
    properties: {
        cooldown: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CooldownSchema'
                }
            ],
            description: 'Cooldown details.'
        },
        item: {
            allOf: [
                {
                    '$ref': '#/components/schemas/SimpleItemSchema'
                }
            ],
            description: 'Item details.'
        },
        character: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CharacterSchema'
                }
            ],
            description: 'Player details.'
        }
    },
    type: 'object',
    required: ['cooldown', 'item', 'character'],
    title: 'DeleteItemSchema'
} as const;

export const DepositWithdrawGoldSchemaSchema = {
    properties: {
        quantity: {
            type: 'integer',
            minimum: 1,
            title: 'Quantity',
            description: 'Quantity of gold.'
        }
    },
    type: 'object',
    required: ['quantity'],
    title: 'DepositWithdrawGoldSchema'
} as const;

export const DestinationSchemaSchema = {
    properties: {
        x: {
            type: 'integer',
            title: 'X',
            description: 'The x coordinate of the destination.'
        },
        y: {
            type: 'integer',
            title: 'Y',
            description: 'The y coordinate of the destination.'
        }
    },
    type: 'object',
    required: ['x', 'y'],
    title: 'DestinationSchema'
} as const;

export const DropRateSchemaSchema = {
    properties: {
        code: {
            type: 'string',
            pattern: '^[a-zA-Z0-9_-]+$',
            title: 'Item code',
            description: 'Item code.'
        },
        rate: {
            type: 'integer',
            minimum: 1,
            title: 'Rate',
            description: 'Chance rate. (1/rate)'
        },
        min_quantity: {
            type: 'integer',
            minimum: 1,
            title: 'Min Quantity',
            description: 'Minimum quantity.'
        },
        max_quantity: {
            type: 'integer',
            minimum: 1,
            title: 'Max Quantity',
            description: 'Maximum quantity.'
        }
    },
    type: 'object',
    required: ['code', 'rate', 'min_quantity', 'max_quantity'],
    title: 'DropRateSchema'
} as const;

export const DropSchemaSchema = {
    properties: {
        code: {
            type: 'string',
            title: 'Code',
            description: 'The code of the item.'
        },
        quantity: {
            type: 'integer',
            title: 'Quantity',
            description: 'The quantity of the item.'
        }
    },
    type: 'object',
    required: ['code', 'quantity'],
    title: 'DropSchema'
} as const;

export const EquipRequestSchemaSchema = {
    properties: {
        cooldown: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CooldownSchema'
                }
            ],
            description: 'Cooldown details.'
        },
        slot: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ItemSlot'
                }
            ],
            description: 'Item slot.'
        },
        item: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ItemSchema'
                }
            ],
            description: 'Item details.'
        },
        character: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CharacterSchema'
                }
            ],
            description: 'Player details.'
        }
    },
    type: 'object',
    required: ['cooldown', 'slot', 'item', 'character'],
    title: 'EquipRequestSchema'
} as const;

export const EquipSchemaSchema = {
    properties: {
        code: {
            type: 'string',
            pattern: '^[a-zA-Z0-9_-]+$',
            title: 'Code',
            description: 'Item code.'
        },
        slot: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ItemSlot'
                }
            ],
            description: 'Item slot.'
        },
        quantity: {
            type: 'integer',
            maximum: 100,
            minimum: 1,
            title: 'Quantity',
            description: 'Item quantity. Applicable to utilitys only.',
            default: 1
        }
    },
    type: 'object',
    required: ['code', 'slot'],
    title: 'EquipSchema'
} as const;

export const EquipmentResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/EquipRequestSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'EquipmentResponseSchema'
} as const;

export const EventContentSchemaSchema = {
    properties: {
        type: {
            type: 'string',
            title: 'Type',
            description: 'Type of the event.'
        },
        code: {
            type: 'string',
            title: 'Code',
            description: 'Code content.'
        }
    },
    type: 'object',
    required: ['type', 'code'],
    title: 'EventContentSchema'
} as const;

export const EventMapSchemaSchema = {
    properties: {
        x: {
            type: 'integer',
            title: 'X',
            description: 'Position X of the map.'
        },
        y: {
            type: 'integer',
            title: 'Y',
            description: 'Position Y of the map.'
        }
    },
    type: 'object',
    required: ['x', 'y'],
    title: 'EventMapSchema'
} as const;

export const EventSchemaSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name',
            description: 'Name of the event.'
        },
        code: {
            type: 'string',
            title: 'Code',
            description: "Code of the event. This is the event's unique identifier (ID)."
        },
        maps: {
            items: {
                '$ref': '#/components/schemas/EventMapSchema'
            },
            type: 'array',
            title: 'Maps',
            description: 'Map list of the event.'
        },
        skin: {
            type: 'string',
            title: 'Skin',
            description: 'Map skin of the event.'
        },
        duration: {
            type: 'integer',
            title: 'Duration',
            description: 'Duration in minutes.'
        },
        rate: {
            type: 'integer',
            title: 'Rate',
            description: 'Rate spawn of the event. (1/rate every minute)'
        },
        content: {
            allOf: [
                {
                    '$ref': '#/components/schemas/EventContentSchema'
                }
            ],
            description: 'Content of the event.'
        }
    },
    type: 'object',
    required: ['name', 'code', 'maps', 'skin', 'duration', 'rate', 'content'],
    title: 'EventSchema'
} as const;

export const FightResultSchema = {
    type: 'string',
    enum: ['win', 'loss'],
    title: 'FightResult'
} as const;

export const FightSchemaSchema = {
    properties: {
        xp: {
            type: 'integer',
            title: 'Xp',
            description: 'The amount of xp gained by the fight.'
        },
        gold: {
            type: 'integer',
            title: 'Gold',
            description: 'The amount of gold gained by the fight.'
        },
        drops: {
            items: {
                '$ref': '#/components/schemas/DropSchema'
            },
            type: 'array',
            title: 'Drops',
            description: 'The items dropped by the fight.'
        },
        turns: {
            type: 'integer',
            title: 'Turns',
            description: 'Numbers of the turns of the combat.'
        },
        monster_blocked_hits: {
            allOf: [
                {
                    '$ref': '#/components/schemas/BlockedHitsSchema'
                }
            ],
            description: 'The amount of blocked hits by the monster.'
        },
        player_blocked_hits: {
            allOf: [
                {
                    '$ref': '#/components/schemas/BlockedHitsSchema'
                }
            ],
            description: 'The amount of blocked hits by the player.'
        },
        logs: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Logs',
            description: 'The fight logs.'
        },
        result: {
            allOf: [
                {
                    '$ref': '#/components/schemas/FightResult'
                }
            ],
            description: 'The result of the fight.'
        }
    },
    type: 'object',
    required: ['xp', 'gold', 'drops', 'turns', 'monster_blocked_hits', 'player_blocked_hits', 'logs', 'result'],
    title: 'FightSchema'
} as const;

export const GEBuyOrderSchemaSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id',
            description: 'Order id.'
        },
        quantity: {
            type: 'integer',
            maximum: 100,
            minimum: 1,
            title: 'Quantity',
            description: 'Item quantity.'
        }
    },
    type: 'object',
    required: ['id', 'quantity'],
    title: 'GEBuyOrderSchema'
} as const;

export const GECancelOrderSchemaSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id',
            description: 'Order id.'
        }
    },
    type: 'object',
    required: ['id'],
    title: 'GECancelOrderSchema'
} as const;

export const GECreateOrderTransactionResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/GEOrderTransactionSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'GECreateOrderTransactionResponseSchema'
} as const;

export const GEOrderCreatedSchemaSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id',
            description: 'Order id.'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At',
            description: 'Order created at.'
        },
        code: {
            type: 'string',
            pattern: '^[a-zA-Z0-9_-]+$',
            title: 'Code',
            description: 'Item code.'
        },
        quantity: {
            type: 'integer',
            maximum: 100,
            minimum: 1,
            title: 'Quantity',
            description: 'Item quantity.'
        },
        price: {
            type: 'integer',
            minimum: 1,
            title: 'Price',
            description: 'Item price per unit.'
        },
        total_price: {
            type: 'integer',
            minimum: 1,
            title: 'Total Price',
            description: 'Total price.'
        },
        tax: {
            type: 'integer',
            minimum: 1,
            title: 'Tax',
            description: 'Order creation tax (5%, minimum 1)'
        }
    },
    type: 'object',
    required: ['id', 'created_at', 'code', 'quantity', 'price', 'total_price', 'tax'],
    title: 'GEOrderCreatedSchema'
} as const;

export const GEOrderCreationrSchemaSchema = {
    properties: {
        code: {
            type: 'string',
            pattern: '^[a-zA-Z0-9_-]+$',
            title: 'Code',
            description: 'Item code.'
        },
        quantity: {
            type: 'integer',
            maximum: 100,
            minimum: 1,
            title: 'Quantity',
            description: 'Item quantity.'
        },
        price: {
            type: 'integer',
            maximum: 1000000000,
            minimum: 1,
            title: 'Price',
            description: 'Item price per unit.'
        }
    },
    type: 'object',
    required: ['code', 'quantity', 'price'],
    title: 'GEOrderCreationrSchema'
} as const;

export const GEOrderReponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/GEOrderSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'GEOrderReponseSchema'
} as const;

export const GEOrderSchemaSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id',
            description: 'Order id.'
        },
        seller: {
            type: 'string',
            title: 'Seller',
            description: 'Seller account name.'
        },
        code: {
            type: 'string',
            title: 'Code',
            description: 'Item code.'
        },
        quantity: {
            type: 'integer',
            maximum: 100,
            minimum: 1,
            title: 'Quantity',
            description: 'Item quantity.'
        },
        price: {
            type: 'integer',
            minimum: 1,
            title: 'Price',
            description: 'Item price per unit.'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At',
            description: 'Order created at.'
        }
    },
    type: 'object',
    required: ['id', 'seller', 'code', 'quantity', 'price', 'created_at'],
    title: 'GEOrderSchema'
} as const;

export const GEOrderTransactionSchemaSchema = {
    properties: {
        cooldown: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CooldownSchema'
                }
            ],
            description: 'Cooldown details.'
        },
        order: {
            allOf: [
                {
                    '$ref': '#/components/schemas/GEOrderCreatedSchema'
                }
            ],
            description: 'Order details.'
        },
        character: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CharacterSchema'
                }
            ],
            description: 'Character details.'
        }
    },
    type: 'object',
    required: ['cooldown', 'order', 'character'],
    title: 'GEOrderTransactionSchema'
} as const;

export const GETransactionListSchemaSchema = {
    properties: {
        cooldown: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CooldownSchema'
                }
            ],
            description: 'Cooldown details.'
        },
        order: {
            allOf: [
                {
                    '$ref': '#/components/schemas/GETransactionSchema'
                }
            ],
            description: 'Transaction details.'
        },
        character: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CharacterSchema'
                }
            ],
            description: 'Character details.'
        }
    },
    type: 'object',
    required: ['cooldown', 'order', 'character'],
    title: 'GETransactionListSchema'
} as const;

export const GETransactionResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/GETransactionListSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'GETransactionResponseSchema'
} as const;

export const GETransactionSchemaSchema = {
    properties: {
        id: {
            type: 'string',
            title: 'Id',
            description: 'Order id.'
        },
        code: {
            type: 'string',
            title: 'Code',
            description: 'Item code.'
        },
        quantity: {
            type: 'integer',
            title: 'Quantity',
            description: 'Item quantity.'
        },
        price: {
            type: 'integer',
            title: 'Price',
            description: 'Item price.'
        },
        total_price: {
            type: 'integer',
            title: 'Total Price',
            description: 'Total price of the transaction.'
        }
    },
    type: 'object',
    required: ['id', 'code', 'quantity', 'price', 'total_price'],
    title: 'GETransactionSchema'
} as const;

export const GatheringSkillSchema = {
    type: 'string',
    enum: ['mining', 'woodcutting', 'fishing', 'alchemy'],
    title: 'GatheringSkill'
} as const;

export const GatheringSkill_a_zA_Z0_9_______Schema = {
    '$ref': '#/components/schemas/GatheringSkill'
} as const;

export const GeOrderHistorySchemaSchema = {
    properties: {
        order_id: {
            type: 'string',
            title: 'Order Id',
            description: 'Order id.'
        },
        seller: {
            type: 'string',
            title: 'Seller',
            description: 'Seller account name.'
        },
        buyer: {
            type: 'string',
            title: 'Buyer',
            description: 'Buyer account name.'
        },
        code: {
            type: 'string',
            title: 'Code',
            description: 'Item code.'
        },
        quantity: {
            type: 'integer',
            maximum: 100,
            minimum: 1,
            title: 'Quantity',
            description: 'Item quantity.'
        },
        price: {
            type: 'integer',
            minimum: 1,
            title: 'Price',
            description: 'Item price per unit.'
        },
        sold_at: {
            type: 'string',
            format: 'date-time',
            title: 'Sold At',
            description: 'Sale datetime.'
        }
    },
    type: 'object',
    required: ['order_id', 'seller', 'buyer', 'code', 'quantity', 'price', 'sold_at'],
    title: 'GeOrderHistorySchema'
} as const;

export const GoldSchemaSchema = {
    properties: {
        quantity: {
            type: 'integer',
            minimum: 0,
            title: 'Quantity',
            description: 'Quantity of gold.'
        }
    },
    type: 'object',
    required: ['quantity'],
    title: 'GoldSchema'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const InventorySlotSchema = {
    properties: {
        slot: {
            type: 'integer',
            title: 'Slot',
            description: 'Inventory slot identifier.'
        },
        code: {
            type: 'string',
            title: 'Code',
            description: 'Item code.'
        },
        quantity: {
            type: 'integer',
            title: 'Quantity',
            description: 'Quantity in the slot.'
        }
    },
    type: 'object',
    required: ['slot', 'code', 'quantity'],
    title: 'InventorySlot'
} as const;

export const ItemEffectSchemaSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name',
            description: 'Effect name.'
        },
        value: {
            type: 'integer',
            title: 'Value',
            description: 'Effect value.'
        }
    },
    type: 'object',
    required: ['name', 'value'],
    title: 'ItemEffectSchema'
} as const;

export const ItemResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/ItemSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'ItemResponseSchema'
} as const;

export const ItemSchemaSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name',
            description: 'Item name.'
        },
        code: {
            type: 'string',
            title: 'Code',
            description: "Item code. This is the item's unique identifier (ID)."
        },
        level: {
            type: 'integer',
            minimum: 1,
            title: 'Level',
            description: 'Item level.'
        },
        type: {
            type: 'string',
            title: 'Type',
            description: 'Item type.'
        },
        subtype: {
            type: 'string',
            title: 'Subtype',
            description: 'Item subtype.'
        },
        description: {
            type: 'string',
            title: 'Description',
            description: 'Item description.'
        },
        effects: {
            items: {
                '$ref': '#/components/schemas/ItemEffectSchema'
            },
            type: 'array',
            title: 'Effects',
            description: 'List of object effects. For equipment, it will include item stats.'
        },
        craft: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/CraftSchema'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Craft information. If applicable.'
        },
        tradeable: {
            type: 'boolean',
            title: 'Tradeable',
            description: 'Item tradeable status. A non-tradeable item cannot be exchanged or sold.'
        }
    },
    type: 'object',
    required: ['name', 'code', 'level', 'type', 'subtype', 'description', 'tradeable'],
    title: 'ItemSchema'
} as const;

export const ItemSlotSchema = {
    type: 'string',
    enum: ['weapon', 'shield', 'helmet', 'body_armor', 'leg_armor', 'boots', 'ring1', 'ring2', 'amulet', 'artifact1', 'artifact2', 'artifact3', 'utility1', 'utility2'],
    title: 'ItemSlot'
} as const;

export const ItemTypeSchema = {
    type: 'string',
    enum: ['utility', 'body_armor', 'weapon', 'resource', 'leg_armor', 'helmet', 'boots', 'shield', 'amulet', 'ring', 'artifact', 'currency', 'consumable'],
    title: 'ItemType'
} as const;

export const ItemType_a_zA_Z0_9_______Schema = {
    '$ref': '#/components/schemas/ItemType'
} as const;

export const LogSchemaSchema = {
    properties: {
        character: {
            type: 'string',
            title: 'Character',
            description: 'Character name.'
        },
        account: {
            type: 'string',
            title: 'Account',
            description: 'Account character.'
        },
        type: {
            allOf: [
                {
                    '$ref': '#/components/schemas/LogType'
                }
            ],
            description: 'Type of action.'
        },
        description: {
            type: 'string',
            title: 'Description',
            description: 'Description of action.'
        },
        content: {
            title: 'Content',
            description: 'Content of action.'
        },
        cooldown: {
            type: 'integer',
            title: 'Cooldown',
            description: 'Cooldown in seconds.'
        },
        cooldown_expiration: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Cooldown Expiration',
            description: 'Datetime of cooldown expiration.'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At',
            description: 'Datetime of creation.'
        }
    },
    type: 'object',
    required: ['character', 'account', 'type', 'description', 'content', 'cooldown', 'cooldown_expiration', 'created_at'],
    title: 'LogSchema'
} as const;

export const LogTypeSchema = {
    type: 'string',
    enum: ['spawn', 'movement', 'fight', 'crafting', 'gathering', 'buy_ge', 'sell_ge', 'cancel_ge', 'delete_item', 'deposit', 'withdraw', 'deposit_gold', 'withdraw_gold', 'equip', 'unequip', 'new_task', 'task_exchange', 'task_cancelled', 'task_completed', 'task_trade', 'recycling', 'rest', 'use', 'buy_bank_expansion', 'achievement'],
    title: 'LogType'
} as const;

export const MapContentSchemaSchema = {
    properties: {
        type: {
            type: 'string',
            title: 'Type',
            description: 'Type of the content.'
        },
        code: {
            type: 'string',
            title: 'Code',
            description: 'Code of the content.'
        }
    },
    type: 'object',
    required: ['type', 'code'],
    title: 'MapContentSchema'
} as const;

export const MapContentTypeSchema = {
    type: 'string',
    enum: ['monster', 'resource', 'workshop', 'bank', 'grand_exchange', 'tasks_master'],
    title: 'MapContentType'
} as const;

export const MapContentType_a_zA_Z0_9_______Schema = {
    '$ref': '#/components/schemas/MapContentType'
} as const;

export const MapResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/MapSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'MapResponseSchema'
} as const;

export const MapSchemaSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name',
            description: 'Name of the map.'
        },
        skin: {
            type: 'string',
            title: 'Skin',
            description: 'Skin of the map.'
        },
        x: {
            type: 'integer',
            title: 'X',
            description: 'Position X of the map.'
        },
        y: {
            type: 'integer',
            title: 'Y',
            description: 'Position Y of the map.'
        },
        content: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/MapContentSchema'
                },
                {
                    type: 'null'
                }
            ],
            description: 'Content of the map.'
        }
    },
    type: 'object',
    required: ['name', 'skin', 'x', 'y', 'content'],
    title: 'MapSchema'
} as const;

export const MonsterResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/MonsterSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'MonsterResponseSchema'
} as const;

export const MonsterSchemaSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name',
            description: 'Name of the monster.'
        },
        code: {
            type: 'string',
            title: 'Code',
            description: "The code of the monster. This is the monster's unique identifier (ID)."
        },
        level: {
            type: 'integer',
            title: 'Level',
            description: 'Monster level.'
        },
        hp: {
            type: 'integer',
            title: 'Hp',
            description: 'Monster hit points.'
        },
        attack_fire: {
            type: 'integer',
            title: 'Attack Fire',
            description: 'Monster fire attack.'
        },
        attack_earth: {
            type: 'integer',
            title: 'Attack Earth',
            description: 'Monster earth attack.'
        },
        attack_water: {
            type: 'integer',
            title: 'Attack Water',
            description: 'Monster water attack.'
        },
        attack_air: {
            type: 'integer',
            title: 'Attack Air',
            description: 'Monster air attack.'
        },
        res_fire: {
            type: 'integer',
            title: 'Res Fire',
            description: 'Monster % fire resistance.'
        },
        res_earth: {
            type: 'integer',
            title: 'Res Earth',
            description: 'Monster % earth resistance.'
        },
        res_water: {
            type: 'integer',
            title: 'Res Water',
            description: 'Monster % water resistance.'
        },
        res_air: {
            type: 'integer',
            title: 'Res Air',
            description: 'Monster % air resistance.'
        },
        min_gold: {
            type: 'integer',
            title: 'Min Gold',
            description: 'Monster minimum gold drop. '
        },
        max_gold: {
            type: 'integer',
            title: 'Max Gold',
            description: 'Monster maximum gold drop. '
        },
        drops: {
            items: {
                '$ref': '#/components/schemas/DropRateSchema'
            },
            type: 'array',
            title: 'Drops',
            description: 'Monster drops. This is a list of items that the monster drops after killing the monster. '
        }
    },
    type: 'object',
    required: ['name', 'code', 'level', 'hp', 'attack_fire', 'attack_earth', 'attack_water', 'attack_air', 'res_fire', 'res_earth', 'res_water', 'res_air', 'min_gold', 'max_gold', 'drops'],
    title: 'MonsterSchema'
} as const;

export const MyAccountDetailsSchema = {
    properties: {
        username: {
            type: 'string',
            title: 'Username',
            description: 'Username.'
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email',
            description: 'Email.'
        },
        subscribed: {
            type: 'boolean',
            title: 'Subscribed',
            description: 'Subscribed for the current season.'
        },
        status: {
            allOf: [
                {
                    '$ref': '#/components/schemas/AccountStatus'
                }
            ],
            description: 'Member status.'
        },
        badges: {
            anyOf: [
                {
                    items: {},
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Badges',
            description: 'Account badges.'
        },
        gems: {
            type: 'integer',
            title: 'Gems',
            description: 'Gems.'
        },
        achievements_points: {
            type: 'integer',
            title: 'Achievements Points',
            description: 'Achievement points.'
        },
        banned: {
            type: 'boolean',
            title: 'Banned',
            description: 'Banned.'
        },
        ban_reason: {
            type: 'string',
            title: 'Ban Reason',
            description: 'Ban reason.'
        }
    },
    type: 'object',
    required: ['username', 'email', 'subscribed', 'status', 'gems', 'achievements_points', 'banned'],
    title: 'MyAccountDetails'
} as const;

export const MyAccountDetailsSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/MyAccountDetails'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'MyAccountDetailsSchema'
} as const;

export const MyCharactersListSchemaSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/CharacterSchema'
            },
            type: 'array',
            title: 'Data',
            description: 'List of your characters.'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'MyCharactersListSchema'
} as const;

export const RecyclingDataSchemaSchema = {
    properties: {
        cooldown: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CooldownSchema'
                }
            ],
            description: 'Cooldown details.'
        },
        details: {
            allOf: [
                {
                    '$ref': '#/components/schemas/RecyclingItemsSchema'
                }
            ],
            description: 'Craft details.'
        },
        character: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CharacterSchema'
                }
            ],
            description: 'Player details.'
        }
    },
    type: 'object',
    required: ['cooldown', 'details', 'character'],
    title: 'RecyclingDataSchema'
} as const;

export const RecyclingItemsSchemaSchema = {
    properties: {
        items: {
            items: {
                '$ref': '#/components/schemas/DropSchema'
            },
            type: 'array',
            title: 'Items',
            description: 'Objects received.'
        }
    },
    type: 'object',
    required: ['items'],
    title: 'RecyclingItemsSchema'
} as const;

export const RecyclingResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/RecyclingDataSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'RecyclingResponseSchema'
} as const;

export const RecyclingSchemaSchema = {
    properties: {
        code: {
            type: 'string',
            pattern: '^[a-zA-Z0-9_-]+$',
            title: 'Item code',
            description: 'Item code.'
        },
        quantity: {
            type: 'integer',
            minimum: 1,
            title: 'Quantity',
            description: 'Quantity of items to recycle.',
            default: 1
        }
    },
    type: 'object',
    required: ['code'],
    title: 'RecyclingSchema'
} as const;

export const ResourceResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/ResourceSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'ResourceResponseSchema'
} as const;

export const ResourceSchemaSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name',
            description: 'The name of the resource'
        },
        code: {
            type: 'string',
            title: 'Code',
            description: "The code of the resource. This is the resource's unique identifier (ID)."
        },
        skill: {
            allOf: [
                {
                    '$ref': '#/components/schemas/GatheringSkill'
                }
            ],
            title: 'Skill code',
            description: 'The skill required to gather this resource.'
        },
        level: {
            type: 'integer',
            title: 'Level',
            description: 'The skill level required to gather this resource.'
        },
        drops: {
            items: {
                '$ref': '#/components/schemas/DropRateSchema'
            },
            type: 'array',
            title: 'Drops',
            description: 'The drops of this resource.'
        }
    },
    type: 'object',
    required: ['name', 'code', 'skill', 'level', 'drops'],
    title: 'ResourceSchema'
} as const;

export const ResponseSchemaSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['message'],
    title: 'ResponseSchema'
} as const;

export const SimpleItemSchemaSchema = {
    properties: {
        code: {
            type: 'string',
            pattern: '^[a-zA-Z0-9_-]+$',
            title: 'Code',
            description: 'Item code.'
        },
        quantity: {
            type: 'integer',
            minimum: 1,
            title: 'Quantity',
            description: 'Item quantity.'
        }
    },
    type: 'object',
    required: ['code', 'quantity'],
    title: 'SimpleItemSchema'
} as const;

export const SkillSchema = {
    type: 'string',
    enum: ['weaponcrafting', 'gearcrafting', 'jewelrycrafting', 'cooking', 'woodcutting', 'mining', 'alchemy', 'fishing'],
    title: 'Skill'
} as const;

export const SkillDataSchemaSchema = {
    properties: {
        cooldown: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CooldownSchema'
                }
            ],
            description: 'Cooldown details.'
        },
        details: {
            allOf: [
                {
                    '$ref': '#/components/schemas/SkillInfoSchema'
                }
            ],
            description: 'Craft details.'
        },
        character: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CharacterSchema'
                }
            ],
            description: 'Player details.'
        }
    },
    type: 'object',
    required: ['cooldown', 'details', 'character'],
    title: 'SkillDataSchema'
} as const;

export const SkillInfoSchemaSchema = {
    properties: {
        xp: {
            type: 'integer',
            title: 'Xp',
            description: 'The amount of xp gained.'
        },
        items: {
            items: {
                '$ref': '#/components/schemas/DropSchema'
            },
            type: 'array',
            title: 'Items',
            description: 'Objects received.'
        }
    },
    type: 'object',
    required: ['xp', 'items'],
    title: 'SkillInfoSchema'
} as const;

export const SkillResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/SkillDataSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'SkillResponseSchema'
} as const;

export const Skill_a_zA_Z0_9_______Schema = {
    '$ref': '#/components/schemas/Skill'
} as const;

export const StatusResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/StatusSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'StatusResponseSchema'
} as const;

export const StatusSchemaSchema = {
    properties: {
        status: {
            type: 'string',
            title: 'Status',
            description: 'Server status'
        },
        version: {
            type: 'string',
            title: 'Version',
            description: 'Game version.'
        },
        max_level: {
            type: 'integer',
            title: 'Max Level',
            description: 'Maximum level.'
        },
        characters_online: {
            type: 'integer',
            title: 'Characters Online',
            description: 'Characters online.'
        },
        server_time: {
            type: 'string',
            format: 'date-time',
            title: 'Server Time',
            description: 'Server time.'
        },
        announcements: {
            items: {
                '$ref': '#/components/schemas/AnnouncementSchema'
            },
            type: 'array',
            title: 'Announcements',
            description: 'Server announcements.'
        },
        last_wipe: {
            type: 'string',
            title: 'Last Wipe',
            description: 'Last server wipe.'
        },
        next_wipe: {
            type: 'string',
            title: 'Next Wipe',
            description: 'Next server wipe.'
        }
    },
    type: 'object',
    required: ['status', 'version', 'max_level', 'characters_online', 'server_time', 'announcements', 'last_wipe', 'next_wipe'],
    title: 'StatusSchema'
} as const;

export const TaskCancelledResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/TaskCancelledSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'TaskCancelledResponseSchema'
} as const;

export const TaskCancelledSchemaSchema = {
    properties: {
        cooldown: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CooldownSchema'
                }
            ],
            description: 'Cooldown details.'
        },
        character: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CharacterSchema'
                }
            ],
            description: 'Player details.'
        }
    },
    type: 'object',
    required: ['cooldown', 'character'],
    title: 'TaskCancelledSchema'
} as const;

export const TaskDataSchemaSchema = {
    properties: {
        cooldown: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CooldownSchema'
                }
            ],
            description: 'Cooldown details.'
        },
        task: {
            allOf: [
                {
                    '$ref': '#/components/schemas/TaskSchema'
                }
            ],
            description: 'Task details.'
        },
        character: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CharacterSchema'
                }
            ],
            description: 'Player details.'
        }
    },
    type: 'object',
    required: ['cooldown', 'task', 'character'],
    title: 'TaskDataSchema'
} as const;

export const TaskFullResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/TaskFullSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'TaskFullResponseSchema'
} as const;

export const TaskFullSchemaSchema = {
    properties: {
        code: {
            type: 'string',
            title: 'Code',
            description: 'Task objective.'
        },
        level: {
            type: 'integer',
            title: 'Level',
            description: 'Task level.'
        },
        type: {
            allOf: [
                {
                    '$ref': '#/components/schemas/TaskType'
                }
            ],
            title: 'Type',
            description: 'The type of task.'
        },
        min_quantity: {
            type: 'integer',
            title: 'Min Quantity',
            description: 'Minimum amount of task.'
        },
        max_quantity: {
            type: 'integer',
            title: 'Max Quantity',
            description: 'Maximum amount of task.'
        },
        skill: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Skill',
            description: 'Skill required to complete the task.'
        },
        rewards: {
            allOf: [
                {
                    '$ref': '#/components/schemas/TaskRewardsSchema'
                }
            ],
            description: 'Rewards.'
        }
    },
    type: 'object',
    required: ['code', 'level', 'type', 'min_quantity', 'max_quantity', 'skill', 'rewards'],
    title: 'TaskFullSchema'
} as const;

export const TaskResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/TaskDataSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'TaskResponseSchema'
} as const;

export const TaskRewardsSchemaSchema = {
    properties: {
        items: {
            items: {
                '$ref': '#/components/schemas/SimpleItemSchema'
            },
            type: 'array',
            title: 'Items',
            description: 'Items rewards.'
        },
        gold: {
            type: 'integer',
            title: 'Gold',
            description: 'Gold rewards.'
        }
    },
    type: 'object',
    required: ['items', 'gold'],
    title: 'TaskRewardsSchema'
} as const;

export const TaskSchemaSchema = {
    properties: {
        code: {
            type: 'string',
            title: 'Code',
            description: 'Task objective.'
        },
        type: {
            allOf: [
                {
                    '$ref': '#/components/schemas/TaskType'
                }
            ],
            title: 'Type',
            description: 'The type of task.'
        },
        total: {
            type: 'integer',
            title: 'Total',
            description: 'The total required to complete the task.'
        },
        rewards: {
            allOf: [
                {
                    '$ref': '#/components/schemas/TaskRewardsSchema'
                }
            ],
            description: 'Rewards for completing the task.'
        }
    },
    type: 'object',
    required: ['code', 'type', 'total', 'rewards'],
    title: 'TaskSchema'
} as const;

export const TaskTradeDataSchemaSchema = {
    properties: {
        cooldown: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CooldownSchema'
                }
            ],
            description: 'Cooldown details.'
        },
        trade: {
            allOf: [
                {
                    '$ref': '#/components/schemas/TaskTradeSchema'
                }
            ],
            description: 'Reward details.'
        },
        character: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CharacterSchema'
                }
            ],
            description: 'Player details.'
        }
    },
    type: 'object',
    required: ['cooldown', 'trade', 'character'],
    title: 'TaskTradeDataSchema'
} as const;

export const TaskTradeResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/TaskTradeDataSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'TaskTradeResponseSchema'
} as const;

export const TaskTradeSchemaSchema = {
    properties: {
        code: {
            type: 'string',
            title: 'Code',
            description: 'Item code.'
        },
        quantity: {
            type: 'integer',
            title: 'Quantity',
            description: 'Item quantity.'
        }
    },
    type: 'object',
    required: ['code', 'quantity'],
    title: 'TaskTradeSchema'
} as const;

export const TaskTypeSchema = {
    type: 'string',
    enum: ['monsters', 'items'],
    title: 'TaskType'
} as const;

export const TaskType_a_zA_Z0_9_______Schema = {
    '$ref': '#/components/schemas/TaskType'
} as const;

export const TasksRewardDataResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/TasksRewardDataSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'TasksRewardDataResponseSchema'
} as const;

export const TasksRewardDataSchemaSchema = {
    properties: {
        cooldown: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CooldownSchema'
                }
            ],
            description: 'Cooldown details.'
        },
        rewards: {
            allOf: [
                {
                    '$ref': '#/components/schemas/TaskRewardsSchema'
                }
            ],
            description: 'Reward details.'
        },
        character: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CharacterSchema'
                }
            ],
            description: 'Player details.'
        }
    },
    type: 'object',
    required: ['cooldown', 'rewards', 'character'],
    title: 'TasksRewardDataSchema'
} as const;

export const TasksRewardResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/DropRateSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'TasksRewardResponseSchema'
} as const;

export const TokenResponseSchemaSchema = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        }
    },
    type: 'object',
    required: ['token'],
    title: 'TokenResponseSchema'
} as const;

export const UnequipSchemaSchema = {
    properties: {
        slot: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ItemSlot'
                }
            ],
            description: 'Item slot.'
        },
        quantity: {
            type: 'integer',
            maximum: 100,
            minimum: 1,
            title: 'Quantity',
            description: 'Item quantity. Applicable to utilitys only.',
            default: 1
        }
    },
    type: 'object',
    required: ['slot'],
    title: 'UnequipSchema'
} as const;

export const UseItemResponseSchemaSchema = {
    properties: {
        data: {
            '$ref': '#/components/schemas/UseItemSchema'
        }
    },
    type: 'object',
    required: ['data'],
    title: 'UseItemResponseSchema'
} as const;

export const UseItemSchemaSchema = {
    properties: {
        cooldown: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CooldownSchema'
                }
            ],
            description: 'Cooldown details.'
        },
        item: {
            allOf: [
                {
                    '$ref': '#/components/schemas/ItemSchema'
                }
            ],
            description: 'Item details.'
        },
        character: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CharacterSchema'
                }
            ],
            description: 'Player details.'
        }
    },
    type: 'object',
    required: ['cooldown', 'item', 'character'],
    title: 'UseItemSchema'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;