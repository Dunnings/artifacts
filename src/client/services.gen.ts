// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import type { ActionMoveMyNameActionMovePostData, ActionMoveMyNameActionMovePostError, ActionMoveMyNameActionMovePostResponse, ActionRestMyNameActionRestPostData, ActionRestMyNameActionRestPostError, ActionRestMyNameActionRestPostResponse, ActionEquipItemMyNameActionEquipPostData, ActionEquipItemMyNameActionEquipPostError, ActionEquipItemMyNameActionEquipPostResponse, ActionUnequipItemMyNameActionUnequipPostData, ActionUnequipItemMyNameActionUnequipPostError, ActionUnequipItemMyNameActionUnequipPostResponse, ActionUseItemMyNameActionUsePostData, ActionUseItemMyNameActionUsePostError, ActionUseItemMyNameActionUsePostResponse, ActionFightMyNameActionFightPostData, ActionFightMyNameActionFightPostError, ActionFightMyNameActionFightPostResponse, ActionGatheringMyNameActionGatheringPostData, ActionGatheringMyNameActionGatheringPostError, ActionGatheringMyNameActionGatheringPostResponse, ActionCraftingMyNameActionCraftingPostData, ActionCraftingMyNameActionCraftingPostError, ActionCraftingMyNameActionCraftingPostResponse, ActionDepositBankGoldMyNameActionBankDepositGoldPostData, ActionDepositBankGoldMyNameActionBankDepositGoldPostError, ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse, ActionDepositBankMyNameActionBankDepositPostData, ActionDepositBankMyNameActionBankDepositPostError, ActionDepositBankMyNameActionBankDepositPostResponse, ActionWithdrawBankMyNameActionBankWithdrawPostData, ActionWithdrawBankMyNameActionBankWithdrawPostError, ActionWithdrawBankMyNameActionBankWithdrawPostResponse, ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostData, ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostError, ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse, ActionBuyBankExpansionMyNameActionBankBuyExpansionPostData, ActionBuyBankExpansionMyNameActionBankBuyExpansionPostError, ActionBuyBankExpansionMyNameActionBankBuyExpansionPostResponse, ActionRecyclingMyNameActionRecyclingPostData, ActionRecyclingMyNameActionRecyclingPostError, ActionRecyclingMyNameActionRecyclingPostResponse, ActionGeBuyItemMyNameActionGrandexchangeBuyPostData, ActionGeBuyItemMyNameActionGrandexchangeBuyPostError, ActionGeBuyItemMyNameActionGrandexchangeBuyPostResponse, ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostData, ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostError, ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostResponse, ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostData, ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostError, ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostResponse, ActionCompleteTaskMyNameActionTaskCompletePostData, ActionCompleteTaskMyNameActionTaskCompletePostError, ActionCompleteTaskMyNameActionTaskCompletePostResponse, ActionTaskExchangeMyNameActionTaskExchangePostData, ActionTaskExchangeMyNameActionTaskExchangePostError, ActionTaskExchangeMyNameActionTaskExchangePostResponse, ActionAcceptNewTaskMyNameActionTaskNewPostData, ActionAcceptNewTaskMyNameActionTaskNewPostError, ActionAcceptNewTaskMyNameActionTaskNewPostResponse, ActionTaskTradeMyNameActionTaskTradePostData, ActionTaskTradeMyNameActionTaskTradePostError, ActionTaskTradeMyNameActionTaskTradePostResponse, ActionTaskCancelMyNameActionTaskCancelPostData, ActionTaskCancelMyNameActionTaskCancelPostError, ActionTaskCancelMyNameActionTaskCancelPostResponse, ActionDeleteItemMyNameActionDeletePostData, ActionDeleteItemMyNameActionDeletePostError, ActionDeleteItemMyNameActionDeletePostResponse, GetAllCharactersLogsMyLogsGetData, GetAllCharactersLogsMyLogsGetError, GetAllCharactersLogsMyLogsGetResponse, GetMyCharactersMyCharactersGetError, GetMyCharactersMyCharactersGetResponse, GetBankDetailsMyBankGetError, GetBankDetailsMyBankGetResponse, GetBankItemsMyBankItemsGetData, GetBankItemsMyBankItemsGetError, GetBankItemsMyBankItemsGetResponse, GetGeSellOrdersMyGrandexchangeOrdersGetData, GetGeSellOrdersMyGrandexchangeOrdersGetError, GetGeSellOrdersMyGrandexchangeOrdersGetResponse, GetGeSellHistoryMyGrandexchangeHistoryGetData, GetGeSellHistoryMyGrandexchangeHistoryGetError, GetGeSellHistoryMyGrandexchangeHistoryGetResponse, GetAccountDetailsMyDetailsGetError, GetAccountDetailsMyDetailsGetResponse, ChangePasswordMyChangePasswordPostData, ChangePasswordMyChangePasswordPostError, ChangePasswordMyChangePasswordPostResponse, CreateCharacterCharactersCreatePostData, CreateCharacterCharactersCreatePostError, CreateCharacterCharactersCreatePostResponse, DeleteCharacterCharactersDeletePostData, DeleteCharacterCharactersDeletePostError, DeleteCharacterCharactersDeletePostResponse, GetCharacterCharactersNameGetData, GetCharacterCharactersNameGetError, GetCharacterCharactersNameGetResponse, GetAllMapsMapsGetData, GetAllMapsMapsGetError, GetAllMapsMapsGetResponse, GetMapMapsXyGetData, GetMapMapsXyGetError, GetMapMapsXyGetResponse, GetAllItemsItemsGetData, GetAllItemsItemsGetError, GetAllItemsItemsGetResponse, GetItemItemsCodeGetData, GetItemItemsCodeGetError, GetItemItemsCodeGetResponse, GetAllMonstersMonstersGetData, GetAllMonstersMonstersGetError, GetAllMonstersMonstersGetResponse, GetMonsterMonstersCodeGetData, GetMonsterMonstersCodeGetError, GetMonsterMonstersCodeGetResponse, GetAllResourcesResourcesGetData, GetAllResourcesResourcesGetError, GetAllResourcesResourcesGetResponse, GetResourceResourcesCodeGetData, GetResourceResourcesCodeGetError, GetResourceResourcesCodeGetResponse, GetAllActiveEventsEventsActiveGetData, GetAllActiveEventsEventsActiveGetError, GetAllActiveEventsEventsActiveGetResponse, GetAllEventsEventsGetData, GetAllEventsEventsGetError, GetAllEventsEventsGetResponse, GetGeSellHistoryGrandexchangeHistoryCodeGetData, GetGeSellHistoryGrandexchangeHistoryCodeGetError, GetGeSellHistoryGrandexchangeHistoryCodeGetResponse, GetGeSellOrdersGrandexchangeOrdersGetData, GetGeSellOrdersGrandexchangeOrdersGetError, GetGeSellOrdersGrandexchangeOrdersGetResponse, GetGeSellOrderGrandexchangeOrdersIdGetData, GetGeSellOrderGrandexchangeOrdersIdGetError, GetGeSellOrderGrandexchangeOrdersIdGetResponse, GetAllTasksTasksListGetData, GetAllTasksTasksListGetError, GetAllTasksTasksListGetResponse, GetTaskTasksListCodeGetData, GetTaskTasksListCodeGetError, GetTaskTasksListCodeGetResponse, GetAllTasksRewardsTasksRewardsGetData, GetAllTasksRewardsTasksRewardsGetError, GetAllTasksRewardsTasksRewardsGetResponse, GetTasksRewardTasksRewardsCodeGetData, GetTasksRewardTasksRewardsCodeGetError, GetTasksRewardTasksRewardsCodeGetResponse, GetAllAchievementsAchievementsGetData, GetAllAchievementsAchievementsGetError, GetAllAchievementsAchievementsGetResponse, GetAchievementAchievementsCodeGetData, GetAchievementAchievementsCodeGetError, GetAchievementAchievementsCodeGetResponse, GetCharactersLeaderboardLeaderboardCharactersGetData, GetCharactersLeaderboardLeaderboardCharactersGetError, GetCharactersLeaderboardLeaderboardCharactersGetResponse, GetAccountsLeaderboardLeaderboardAccountsGetData, GetAccountsLeaderboardLeaderboardAccountsGetError, GetAccountsLeaderboardLeaderboardAccountsGetResponse, CreateAccountAccountsCreatePostData, CreateAccountAccountsCreatePostError, CreateAccountAccountsCreatePostResponse, GetAccountAchievementsAccountsAccountAchievementsGetData, GetAccountAchievementsAccountsAccountAchievementsGetError, GetAccountAchievementsAccountsAccountAchievementsGetResponse, GetAccountAccountsAccountGetData, GetAccountAccountsAccountGetError, GetAccountAccountsAccountGetResponse, GenerateTokenTokenPostError, GenerateTokenTokenPostResponse, GetStatusGetError, GetStatusGetResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Action Move
 * Moves a character on the map using the map's X and Y position.
 */
export const actionMoveMyNameActionMovePost = <ThrowOnError extends boolean = false>(options: Options<ActionMoveMyNameActionMovePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ActionMoveMyNameActionMovePostResponse, ActionMoveMyNameActionMovePostError, ThrowOnError>({
        ...options,
        url: '/my/{name}/action/move'
    });
};

/**
 * Action Rest
 * Recovers hit points by resting. (1 second per 5 HP, minimum 3 seconds)
 */
export const actionRestMyNameActionRestPost = <ThrowOnError extends boolean = false>(options: Options<ActionRestMyNameActionRestPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ActionRestMyNameActionRestPostResponse, ActionRestMyNameActionRestPostError, ThrowOnError>({
        ...options,
        url: '/my/{name}/action/rest'
    });
};

/**
 * Action Equip Item
 * Equip an item on your character.
 */
export const actionEquipItemMyNameActionEquipPost = <ThrowOnError extends boolean = false>(options: Options<ActionEquipItemMyNameActionEquipPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ActionEquipItemMyNameActionEquipPostResponse, ActionEquipItemMyNameActionEquipPostError, ThrowOnError>({
        ...options,
        url: '/my/{name}/action/equip'
    });
};

/**
 * Action Unequip Item
 * Unequip an item on your character.
 */
export const actionUnequipItemMyNameActionUnequipPost = <ThrowOnError extends boolean = false>(options: Options<ActionUnequipItemMyNameActionUnequipPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ActionUnequipItemMyNameActionUnequipPostResponse, ActionUnequipItemMyNameActionUnequipPostError, ThrowOnError>({
        ...options,
        url: '/my/{name}/action/unequip'
    });
};

/**
 * Action Use Item
 * Use an item as a consumable.
 */
export const actionUseItemMyNameActionUsePost = <ThrowOnError extends boolean = false>(options: Options<ActionUseItemMyNameActionUsePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ActionUseItemMyNameActionUsePostResponse, ActionUseItemMyNameActionUsePostError, ThrowOnError>({
        ...options,
        url: '/my/{name}/action/use'
    });
};

/**
 * Action Fight
 * Start a fight against a monster on the character's map.
 */
export const actionFightMyNameActionFightPost = <ThrowOnError extends boolean = false>(options: Options<ActionFightMyNameActionFightPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ActionFightMyNameActionFightPostResponse, ActionFightMyNameActionFightPostError, ThrowOnError>({
        ...options,
        url: '/my/{name}/action/fight'
    });
};

/**
 * Action Gathering
 * Harvest a resource on the character's map.
 */
export const actionGatheringMyNameActionGatheringPost = <ThrowOnError extends boolean = false>(options: Options<ActionGatheringMyNameActionGatheringPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ActionGatheringMyNameActionGatheringPostResponse, ActionGatheringMyNameActionGatheringPostError, ThrowOnError>({
        ...options,
        url: '/my/{name}/action/gathering'
    });
};

/**
 * Action Crafting
 * Crafting an item. The character must be on a map with a workshop.
 */
export const actionCraftingMyNameActionCraftingPost = <ThrowOnError extends boolean = false>(options: Options<ActionCraftingMyNameActionCraftingPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ActionCraftingMyNameActionCraftingPostResponse, ActionCraftingMyNameActionCraftingPostError, ThrowOnError>({
        ...options,
        url: '/my/{name}/action/crafting'
    });
};

/**
 * Action Deposit Bank Gold
 * Deposit gold in a bank on the character's map.
 */
export const actionDepositBankGoldMyNameActionBankDepositGoldPost = <ThrowOnError extends boolean = false>(options: Options<ActionDepositBankGoldMyNameActionBankDepositGoldPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse, ActionDepositBankGoldMyNameActionBankDepositGoldPostError, ThrowOnError>({
        ...options,
        url: '/my/{name}/action/bank/deposit/gold'
    });
};

/**
 * Action Deposit Bank
 * Deposit an item in a bank on the character's map.
 */
export const actionDepositBankMyNameActionBankDepositPost = <ThrowOnError extends boolean = false>(options: Options<ActionDepositBankMyNameActionBankDepositPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ActionDepositBankMyNameActionBankDepositPostResponse, ActionDepositBankMyNameActionBankDepositPostError, ThrowOnError>({
        ...options,
        url: '/my/{name}/action/bank/deposit'
    });
};

/**
 * Action Withdraw Bank
 * Take an item from your bank and put it in the character's inventory.
 */
export const actionWithdrawBankMyNameActionBankWithdrawPost = <ThrowOnError extends boolean = false>(options: Options<ActionWithdrawBankMyNameActionBankWithdrawPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ActionWithdrawBankMyNameActionBankWithdrawPostResponse, ActionWithdrawBankMyNameActionBankWithdrawPostError, ThrowOnError>({
        ...options,
        url: '/my/{name}/action/bank/withdraw'
    });
};

/**
 * Action Withdraw Bank Gold
 * Withdraw gold from your bank.
 */
export const actionWithdrawBankGoldMyNameActionBankWithdrawGoldPost = <ThrowOnError extends boolean = false>(options: Options<ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse, ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostError, ThrowOnError>({
        ...options,
        url: '/my/{name}/action/bank/withdraw/gold'
    });
};

/**
 * Action Buy Bank Expansion
 * Buy a 20 slots bank expansion.
 */
export const actionBuyBankExpansionMyNameActionBankBuyExpansionPost = <ThrowOnError extends boolean = false>(options: Options<ActionBuyBankExpansionMyNameActionBankBuyExpansionPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ActionBuyBankExpansionMyNameActionBankBuyExpansionPostResponse, ActionBuyBankExpansionMyNameActionBankBuyExpansionPostError, ThrowOnError>({
        ...options,
        url: '/my/{name}/action/bank/buy_expansion'
    });
};

/**
 * Action Recycling
 * Recycling an item. The character must be on a map with a workshop (only for equipments and weapons).
 */
export const actionRecyclingMyNameActionRecyclingPost = <ThrowOnError extends boolean = false>(options: Options<ActionRecyclingMyNameActionRecyclingPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ActionRecyclingMyNameActionRecyclingPostResponse, ActionRecyclingMyNameActionRecyclingPostError, ThrowOnError>({
        ...options,
        url: '/my/{name}/action/recycling'
    });
};

/**
 * Action Ge Buy Item
 * Buy an item at the Grand Exchange on the character's map.
 */
export const actionGeBuyItemMyNameActionGrandexchangeBuyPost = <ThrowOnError extends boolean = false>(options: Options<ActionGeBuyItemMyNameActionGrandexchangeBuyPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ActionGeBuyItemMyNameActionGrandexchangeBuyPostResponse, ActionGeBuyItemMyNameActionGrandexchangeBuyPostError, ThrowOnError>({
        ...options,
        url: '/my/{name}/action/grandexchange/buy'
    });
};

/**
 * Action Ge Create Sell Order
 * Create a sell order at the Grand Exchange on the character's map. Please note that a 5% sales tax is charged.
 */
export const actionGeCreateSellOrderMyNameActionGrandexchangeSellPost = <ThrowOnError extends boolean = false>(options: Options<ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostResponse, ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostError, ThrowOnError>({
        ...options,
        url: '/my/{name}/action/grandexchange/sell'
    });
};

/**
 * Action Ge Cancel Sell Order
 * Cancel a sell order at the Grand Exchange on the character's map.
 */
export const actionGeCancelSellOrderMyNameActionGrandexchangeCancelPost = <ThrowOnError extends boolean = false>(options: Options<ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostResponse, ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostError, ThrowOnError>({
        ...options,
        url: '/my/{name}/action/grandexchange/cancel'
    });
};

/**
 * Action Complete Task
 * Complete a task.
 */
export const actionCompleteTaskMyNameActionTaskCompletePost = <ThrowOnError extends boolean = false>(options: Options<ActionCompleteTaskMyNameActionTaskCompletePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ActionCompleteTaskMyNameActionTaskCompletePostResponse, ActionCompleteTaskMyNameActionTaskCompletePostError, ThrowOnError>({
        ...options,
        url: '/my/{name}/action/task/complete'
    });
};

/**
 * Action Task Exchange
 * Exchange 6 tasks coins for a random reward. Rewards are exclusive items or resources.
 */
export const actionTaskExchangeMyNameActionTaskExchangePost = <ThrowOnError extends boolean = false>(options: Options<ActionTaskExchangeMyNameActionTaskExchangePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ActionTaskExchangeMyNameActionTaskExchangePostResponse, ActionTaskExchangeMyNameActionTaskExchangePostError, ThrowOnError>({
        ...options,
        url: '/my/{name}/action/task/exchange'
    });
};

/**
 * Action Accept New Task
 * Accepting a new task.
 */
export const actionAcceptNewTaskMyNameActionTaskNewPost = <ThrowOnError extends boolean = false>(options: Options<ActionAcceptNewTaskMyNameActionTaskNewPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ActionAcceptNewTaskMyNameActionTaskNewPostResponse, ActionAcceptNewTaskMyNameActionTaskNewPostError, ThrowOnError>({
        ...options,
        url: '/my/{name}/action/task/new'
    });
};

/**
 * Action Task Trade
 * Trading items with a Tasks Master.
 */
export const actionTaskTradeMyNameActionTaskTradePost = <ThrowOnError extends boolean = false>(options: Options<ActionTaskTradeMyNameActionTaskTradePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ActionTaskTradeMyNameActionTaskTradePostResponse, ActionTaskTradeMyNameActionTaskTradePostError, ThrowOnError>({
        ...options,
        url: '/my/{name}/action/task/trade'
    });
};

/**
 * Action Task Cancel
 * Cancel a task for 1 tasks coin.
 */
export const actionTaskCancelMyNameActionTaskCancelPost = <ThrowOnError extends boolean = false>(options: Options<ActionTaskCancelMyNameActionTaskCancelPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ActionTaskCancelMyNameActionTaskCancelPostResponse, ActionTaskCancelMyNameActionTaskCancelPostError, ThrowOnError>({
        ...options,
        url: '/my/{name}/action/task/cancel'
    });
};

/**
 * Action Delete Item
 * Delete an item from your character's inventory.
 */
export const actionDeleteItemMyNameActionDeletePost = <ThrowOnError extends boolean = false>(options: Options<ActionDeleteItemMyNameActionDeletePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ActionDeleteItemMyNameActionDeletePostResponse, ActionDeleteItemMyNameActionDeletePostError, ThrowOnError>({
        ...options,
        url: '/my/{name}/action/delete'
    });
};

/**
 * Get All Characters Logs
 * History of the last 100 actions of all your characters.
 */
export const getAllCharactersLogsMyLogsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllCharactersLogsMyLogsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllCharactersLogsMyLogsGetResponse, GetAllCharactersLogsMyLogsGetError, ThrowOnError>({
        ...options,
        url: '/my/logs'
    });
};

/**
 * Get My Characters
 * List of your characters.
 */
export const getMyCharactersMyCharactersGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMyCharactersMyCharactersGetResponse, GetMyCharactersMyCharactersGetError, ThrowOnError>({
        ...options,
        url: '/my/characters'
    });
};

/**
 * Get Bank Details
 * Fetch bank details.
 */
export const getBankDetailsMyBankGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBankDetailsMyBankGetResponse, GetBankDetailsMyBankGetError, ThrowOnError>({
        ...options,
        url: '/my/bank'
    });
};

/**
 * Get Bank Items
 * Fetch all items in your bank.
 */
export const getBankItemsMyBankItemsGet = <ThrowOnError extends boolean = false>(options?: Options<GetBankItemsMyBankItemsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetBankItemsMyBankItemsGetResponse, GetBankItemsMyBankItemsGetError, ThrowOnError>({
        ...options,
        url: '/my/bank/items'
    });
};

/**
 * Get Ge Sell Orders
 * Fetch your sell orders details.
 */
export const getGeSellOrdersMyGrandexchangeOrdersGet = <ThrowOnError extends boolean = false>(options?: Options<GetGeSellOrdersMyGrandexchangeOrdersGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetGeSellOrdersMyGrandexchangeOrdersGetResponse, GetGeSellOrdersMyGrandexchangeOrdersGetError, ThrowOnError>({
        ...options,
        url: '/my/grandexchange/orders'
    });
};

/**
 * Get Ge Sell History
 * Fetch your sales history of the last 7 days.
 */
export const getGeSellHistoryMyGrandexchangeHistoryGet = <ThrowOnError extends boolean = false>(options?: Options<GetGeSellHistoryMyGrandexchangeHistoryGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetGeSellHistoryMyGrandexchangeHistoryGetResponse, GetGeSellHistoryMyGrandexchangeHistoryGetError, ThrowOnError>({
        ...options,
        url: '/my/grandexchange/history'
    });
};

/**
 * Get Account Details
 * Fetch account details.
 */
export const getAccountDetailsMyDetailsGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAccountDetailsMyDetailsGetResponse, GetAccountDetailsMyDetailsGetError, ThrowOnError>({
        ...options,
        url: '/my/details'
    });
};

/**
 * Change Password
 * Change your account password. Changing the password reset the account token.
 */
export const changePasswordMyChangePasswordPost = <ThrowOnError extends boolean = false>(options: Options<ChangePasswordMyChangePasswordPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ChangePasswordMyChangePasswordPostResponse, ChangePasswordMyChangePasswordPostError, ThrowOnError>({
        ...options,
        url: '/my/change_password'
    });
};

/**
 * Create Character
 * Create new character on your account. You can create up to 5 characters.
 */
export const createCharacterCharactersCreatePost = <ThrowOnError extends boolean = false>(options: Options<CreateCharacterCharactersCreatePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateCharacterCharactersCreatePostResponse, CreateCharacterCharactersCreatePostError, ThrowOnError>({
        ...options,
        url: '/characters/create'
    });
};

/**
 * Delete Character
 * Delete character on your account.
 */
export const deleteCharacterCharactersDeletePost = <ThrowOnError extends boolean = false>(options: Options<DeleteCharacterCharactersDeletePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<DeleteCharacterCharactersDeletePostResponse, DeleteCharacterCharactersDeletePostError, ThrowOnError>({
        ...options,
        url: '/characters/delete'
    });
};

/**
 * Get Character
 * Retrieve the details of a character.
 */
export const getCharacterCharactersNameGet = <ThrowOnError extends boolean = false>(options: Options<GetCharacterCharactersNameGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCharacterCharactersNameGetResponse, GetCharacterCharactersNameGetError, ThrowOnError>({
        ...options,
        url: '/characters/{name}'
    });
};

/**
 * Get All Maps
 * Fetch maps details.
 */
export const getAllMapsMapsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllMapsMapsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllMapsMapsGetResponse, GetAllMapsMapsGetError, ThrowOnError>({
        ...options,
        url: '/maps'
    });
};

/**
 * Get Map
 * Retrieve the details of a map.
 */
export const getMapMapsXYGet = <ThrowOnError extends boolean = false>(options: Options<GetMapMapsXyGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMapMapsXyGetResponse, GetMapMapsXyGetError, ThrowOnError>({
        ...options,
        url: '/maps/{x}/{y}'
    });
};

/**
 * Get All Items
 * Fetch items details.
 */
export const getAllItemsItemsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllItemsItemsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllItemsItemsGetResponse, GetAllItemsItemsGetError, ThrowOnError>({
        ...options,
        url: '/items'
    });
};

/**
 * Get Item
 * Retrieve the details of a item.
 */
export const getItemItemsCodeGet = <ThrowOnError extends boolean = false>(options: Options<GetItemItemsCodeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetItemItemsCodeGetResponse, GetItemItemsCodeGetError, ThrowOnError>({
        ...options,
        url: '/items/{code}'
    });
};

/**
 * Get All Monsters
 * Fetch monsters details.
 */
export const getAllMonstersMonstersGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllMonstersMonstersGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllMonstersMonstersGetResponse, GetAllMonstersMonstersGetError, ThrowOnError>({
        ...options,
        url: '/monsters'
    });
};

/**
 * Get Monster
 * Retrieve the details of a monster.
 */
export const getMonsterMonstersCodeGet = <ThrowOnError extends boolean = false>(options: Options<GetMonsterMonstersCodeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetMonsterMonstersCodeGetResponse, GetMonsterMonstersCodeGetError, ThrowOnError>({
        ...options,
        url: '/monsters/{code}'
    });
};

/**
 * Get All Resources
 * Fetch resources details.
 */
export const getAllResourcesResourcesGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllResourcesResourcesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllResourcesResourcesGetResponse, GetAllResourcesResourcesGetError, ThrowOnError>({
        ...options,
        url: '/resources'
    });
};

/**
 * Get Resource
 * Retrieve the details of a resource.
 */
export const getResourceResourcesCodeGet = <ThrowOnError extends boolean = false>(options: Options<GetResourceResourcesCodeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetResourceResourcesCodeGetResponse, GetResourceResourcesCodeGetError, ThrowOnError>({
        ...options,
        url: '/resources/{code}'
    });
};

/**
 * Get All Active Events
 * Fetch active events details.
 */
export const getAllActiveEventsEventsActiveGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllActiveEventsEventsActiveGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllActiveEventsEventsActiveGetResponse, GetAllActiveEventsEventsActiveGetError, ThrowOnError>({
        ...options,
        url: '/events/active'
    });
};

/**
 * Get All Events
 * Fetch events details.
 */
export const getAllEventsEventsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllEventsEventsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllEventsEventsGetResponse, GetAllEventsEventsGetError, ThrowOnError>({
        ...options,
        url: '/events'
    });
};

/**
 * Get Ge Sell History
 * Fetch the sales history of the item for the last 7 days.
 */
export const getGeSellHistoryGrandexchangeHistoryCodeGet = <ThrowOnError extends boolean = false>(options: Options<GetGeSellHistoryGrandexchangeHistoryCodeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetGeSellHistoryGrandexchangeHistoryCodeGetResponse, GetGeSellHistoryGrandexchangeHistoryCodeGetError, ThrowOnError>({
        ...options,
        url: '/grandexchange/history/{code}'
    });
};

/**
 * Get Ge Sell Orders
 * Fetch all sell orders.
 */
export const getGeSellOrdersGrandexchangeOrdersGet = <ThrowOnError extends boolean = false>(options?: Options<GetGeSellOrdersGrandexchangeOrdersGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetGeSellOrdersGrandexchangeOrdersGetResponse, GetGeSellOrdersGrandexchangeOrdersGetError, ThrowOnError>({
        ...options,
        url: '/grandexchange/orders'
    });
};

/**
 * Get Ge Sell Order
 * Retrieve the sell order of a item.
 */
export const getGeSellOrderGrandexchangeOrdersIdGet = <ThrowOnError extends boolean = false>(options: Options<GetGeSellOrderGrandexchangeOrdersIdGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetGeSellOrderGrandexchangeOrdersIdGetResponse, GetGeSellOrderGrandexchangeOrdersIdGetError, ThrowOnError>({
        ...options,
        url: '/grandexchange/orders/{id}'
    });
};

/**
 * Get All Tasks
 * Fetch the list of all tasks.
 */
export const getAllTasksTasksListGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllTasksTasksListGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllTasksTasksListGetResponse, GetAllTasksTasksListGetError, ThrowOnError>({
        ...options,
        url: '/tasks/list'
    });
};

/**
 * Get Task
 * Retrieve the details of a task.
 */
export const getTaskTasksListCodeGet = <ThrowOnError extends boolean = false>(options: Options<GetTaskTasksListCodeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTaskTasksListCodeGetResponse, GetTaskTasksListCodeGetError, ThrowOnError>({
        ...options,
        url: '/tasks/list/{code}'
    });
};

/**
 * Get All Tasks Rewards
 * Fetch the list of all tasks rewards. To obtain these rewards, you must exchange 6 task coins with a tasks master.
 */
export const getAllTasksRewardsTasksRewardsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllTasksRewardsTasksRewardsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllTasksRewardsTasksRewardsGetResponse, GetAllTasksRewardsTasksRewardsGetError, ThrowOnError>({
        ...options,
        url: '/tasks/rewards'
    });
};

/**
 * Get Tasks Reward
 * Retrieve the details of a tasks reward.
 */
export const getTasksRewardTasksRewardsCodeGet = <ThrowOnError extends boolean = false>(options: Options<GetTasksRewardTasksRewardsCodeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetTasksRewardTasksRewardsCodeGetResponse, GetTasksRewardTasksRewardsCodeGetError, ThrowOnError>({
        ...options,
        url: '/tasks/rewards/{code}'
    });
};

/**
 * Get All Achievements
 * List of all achievements.
 */
export const getAllAchievementsAchievementsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllAchievementsAchievementsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllAchievementsAchievementsGetResponse, GetAllAchievementsAchievementsGetError, ThrowOnError>({
        ...options,
        url: '/achievements'
    });
};

/**
 * Get Achievement
 * Retrieve the details of a achievement.
 */
export const getAchievementAchievementsCodeGet = <ThrowOnError extends boolean = false>(options: Options<GetAchievementAchievementsCodeGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAchievementAchievementsCodeGetResponse, GetAchievementAchievementsCodeGetError, ThrowOnError>({
        ...options,
        url: '/achievements/{code}'
    });
};

/**
 * Get Characters Leaderboard
 * Fetch leaderboard details.
 */
export const getCharactersLeaderboardLeaderboardCharactersGet = <ThrowOnError extends boolean = false>(options?: Options<GetCharactersLeaderboardLeaderboardCharactersGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCharactersLeaderboardLeaderboardCharactersGetResponse, GetCharactersLeaderboardLeaderboardCharactersGetError, ThrowOnError>({
        ...options,
        url: '/leaderboard/characters'
    });
};

/**
 * Get Accounts Leaderboard
 * Fetch leaderboard details.
 */
export const getAccountsLeaderboardLeaderboardAccountsGet = <ThrowOnError extends boolean = false>(options?: Options<GetAccountsLeaderboardLeaderboardAccountsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAccountsLeaderboardLeaderboardAccountsGetResponse, GetAccountsLeaderboardLeaderboardAccountsGetError, ThrowOnError>({
        ...options,
        url: '/leaderboard/accounts'
    });
};

/**
 * Create Account
 */
export const createAccountAccountsCreatePost = <ThrowOnError extends boolean = false>(options: Options<CreateAccountAccountsCreatePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateAccountAccountsCreatePostResponse, CreateAccountAccountsCreatePostError, ThrowOnError>({
        ...options,
        url: '/accounts/create'
    });
};

/**
 * Get Account Achievements
 * Retrieve the achievements of a account.
 */
export const getAccountAchievementsAccountsAccountAchievementsGet = <ThrowOnError extends boolean = false>(options: Options<GetAccountAchievementsAccountsAccountAchievementsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAccountAchievementsAccountsAccountAchievementsGetResponse, GetAccountAchievementsAccountsAccountAchievementsGetError, ThrowOnError>({
        ...options,
        url: '/accounts/{account}/achievements'
    });
};

/**
 * Get Account
 * Retrieve the details of a character.
 */
export const getAccountAccountsAccountGet = <ThrowOnError extends boolean = false>(options: Options<GetAccountAccountsAccountGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAccountAccountsAccountGetResponse, GetAccountAccountsAccountGetError, ThrowOnError>({
        ...options,
        url: '/accounts/{account}'
    });
};

/**
 * Generate Token
 * Use your account as HTTPBasic Auth to generate your token to use the API. You can also generate your token directly on the website.
 */
export const generateTokenTokenPost = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).post<GenerateTokenTokenPostResponse, GenerateTokenTokenPostError, ThrowOnError>({
        ...options,
        url: '/token'
    });
};

/**
 * Get Status
 * Return the status of the game server.
 */
export const getStatusGet = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetStatusGetResponse, GetStatusGetError, ThrowOnError>({
        ...options,
        url: '/'
    });
};