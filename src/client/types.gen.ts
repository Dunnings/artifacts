// This file is auto-generated by @hey-api/openapi-ts

export type AccountAchievementSchema = {
  /**
   * Name of the achievement.
   */
  name: string;
  /**
   * Code of the achievement.
   */
  code: string;
  /**
   * Description of the achievement.
   */
  description: string;
  /**
   * Points of the achievement. Used for the leaderboard.
   */
  points: number;
  /**
   * Type of achievement.
   */
  type: AchievementType;
  /**
   * Target of the achievement.
   */
  target: string | null;
  /**
   * Total to do.
   */
  total: number;
  /**
   * Rewards.
   */
  rewards: AchievementRewardsSchema;
  /**
   * Current progress.
   */
  current: number;
  /**
   * Completed at.
   */
  completed_at: string | null;
};

export type AccountDetails = {
  /**
   * Username.
   */
  username: string;
  /**
   * Subscribed for the current season.
   */
  subscribed: boolean;
  /**
   * Member status.
   */
  status: AccountStatus;
  /**
   * Account badges.
   */
  badges?: Array<unknown> | null;
  /**
   * Achievement points.
   */
  achievements_points: number;
  /**
   * Banned.
   */
  banned: boolean;
  /**
   * Ban reason.
   */
  ban_reason?: string;
};

export type AccountDetailsSchema = {
  data: AccountDetails;
};

export type AccountLeaderboardSchema = {
  /**
   * Position in the leaderboard.
   */
  position: number;
  /**
   * Account name.
   */
  account: string;
  /**
   * Member status.
   */
  status: AccountStatus;
  /**
   * Achievements points.
   */
  achievements_points: number;
};

export type AccountLeaderboardType = 'achievements_points';

export type AccountLeaderboardType_a_zA_Z0_9_______ = AccountLeaderboardType;

export type AccountStatus = 'standard' | 'founder' | 'gold_founder' | 'vip_founder';

export type AchievementResponseSchema = {
  data: AchievementSchema;
};

export type AchievementRewardsSchema = {
  /**
   * Gold rewards.
   */
  gold: number;
};

export type AchievementSchema = {
  /**
   * Name of the achievement.
   */
  name: string;
  /**
   * Code of the achievement.
   */
  code: string;
  /**
   * Description of the achievement.
   */
  description: string;
  /**
   * Points of the achievement. Used for the leaderboard.
   */
  points: number;
  /**
   * Type of achievement.
   */
  type: AchievementType;
  /**
   * Target of the achievement.
   */
  target: string | null;
  /**
   * Total to do.
   */
  total: number;
  /**
   * Rewards.
   */
  rewards: AchievementRewardsSchema;
};

export type AchievementType = 'combat_kill' | 'combat_drop' | 'combat_level' | 'gathering' | 'crafting' | 'recycling' | 'task' | 'other';

export type AchievementType_a_zA_Z0_9_______ = AchievementType;

export type ActionType =
  | 'movement'
  | 'fight'
  | 'crafting'
  | 'gathering'
  | 'buy_ge'
  | 'sell_ge'
  | 'cancel_ge'
  | 'delete_item'
  | 'deposit'
  | 'withdraw'
  | 'deposit_gold'
  | 'withdraw_gold'
  | 'equip'
  | 'unequip'
  | 'task'
  | 'recycling'
  | 'rest'
  | 'use'
  | 'buy_bank_expansion';

export type ActiveEventSchema = {
  /**
   * Name of the event.
   */
  name: string;
  /**
   * Code of the event. This is the event's unique identifier (ID).
   */
  code: string;
  /**
   * Map of the event.
   */
  map: MapSchema;
  /**
   * Previous map skin.
   */
  previous_skin: string;
  /**
   * Duration in minutes.
   */
  duration: number;
  /**
   * Expiration datetime.
   */
  expiration: string;
  /**
   * Start datetime.
   */
  created_at: string;
};

export type AddAccountSchema = {
  /**
   * Your desired username.
   */
  username: string;
  /**
   * Your password.
   */
  password: string;
  email?: string;
};

export type AddCharacterSchema = {
  /**
   * Your desired character name. It's unique and all players can see it.
   */
  name: string;
  /**
   * Your desired skin.
   */
  skin: CharacterSkin;
};

export type AnnouncementSchema = {
  /**
   * Announcement text.
   */
  message: string;
  /**
   * Datetime of the announcement.
   */
  created_at?: string;
};

export type BankExtensionSchema = {
  /**
   * Price of the bank extension.
   */
  price: number;
};

export type BankExtensionTransactionResponseSchema = {
  data: BankExtensionTransactionSchema;
};

export type BankExtensionTransactionSchema = {
  /**
   * Cooldown details.
   */
  cooldown: CooldownSchema;
  /**
   * Transaction details.
   */
  transaction: BankExtensionSchema;
  /**
   * Player details.
   */
  character: CharacterSchema;
};

export type BankGoldTransactionResponseSchema = {
  data: BankGoldTransactionSchema;
};

export type BankGoldTransactionSchema = {
  /**
   * Cooldown details.
   */
  cooldown: CooldownSchema;
  /**
   * Bank details.
   */
  bank: GoldSchema;
  /**
   * Player details.
   */
  character: CharacterSchema;
};

export type BankItemTransactionResponseSchema = {
  data: BankItemTransactionSchema;
};

export type BankItemTransactionSchema = {
  /**
   * Cooldown details.
   */
  cooldown: CooldownSchema;
  /**
   * Item details.
   */
  item: ItemSchema;
  /**
   * Items in your banks.
   */
  bank: Array<SimpleItemSchema>;
  /**
   * Player details.
   */
  character: CharacterSchema;
};

export type BankResponseSchema = {
  data: BankSchema;
};

export type BankSchema = {
  /**
   * Maximum slots in your bank.
   */
  slots: number;
  /**
   * Bank expansions.
   */
  expansions: number;
  /**
   * Next expansion cost.
   */
  next_expansion_cost: number;
  /**
   * Quantity of gold in your bank.
   */
  gold: number;
};

export type BlockedHitsSchema = {
  /**
   * The amount of fire hits blocked.
   */
  fire: number;
  /**
   * The amount of earth hits blocked.
   */
  earth: number;
  /**
   * The amount of water hits blocked.
   */
  water: number;
  /**
   * The amount of air hits blocked.
   */
  air: number;
  /**
   * The amount of total hits blocked.
   */
  total: number;
};

export type ChangePassword = {
  /**
   * Your password.
   */
  current_password: string;
  /**
   * New password.
   */
  new_password: string;
};

export type CharacterFightDataSchema = {
  /**
   * Cooldown details.
   */
  cooldown: CooldownSchema;
  /**
   * Fight details.
   */
  fight: FightSchema;
  /**
   * Player details.
   */
  character: CharacterSchema;
};

export type CharacterFightResponseSchema = {
  data: CharacterFightDataSchema;
};

export type CharacterLeaderboardSchema = {
  /**
   * Position in the leaderboard.
   */
  position: number;
  /**
   * Character name.
   */
  name: string;
  /**
   * Account name.
   */
  account: string;
  /**
   * Character skin code.
   */
  skin: string;
  /**
   * Combat level.
   */
  level: number;
  /**
   * Total XP of your character.
   */
  total_xp: number;
  /**
   * Mining level.
   */
  mining_level: number;
  /**
   * Mining total xp.
   */
  mining_total_xp: number;
  /**
   * Woodcutting level.
   */
  woodcutting_level: number;
  /**
   * Woodcutting total xp.
   */
  woodcutting_total_xp: number;
  /**
   * Fishing level.
   */
  fishing_level: number;
  /**
   * Fishing total xp.
   */
  fishing_total_xp: number;
  /**
   * Weaponcrafting level.
   */
  weaponcrafting_level: number;
  /**
   * Weaponcrafting total xp.
   */
  weaponcrafting_total_xp: number;
  /**
   * Gearcrafting level.
   */
  gearcrafting_level: number;
  /**
   * Gearcrafting total xp.
   */
  gearcrafting_total_xp: number;
  /**
   * Jewelrycrafting level.
   */
  jewelrycrafting_level: number;
  /**
   * Jewelrycrafting total xp.
   */
  jewelrycrafting_total_xp: number;
  /**
   * Cooking level.
   */
  cooking_level: number;
  /**
   * Cooking total xp.
   */
  cooking_total_xp: number;
  /**
   * Alchemy level.
   */
  alchemy_level: number;
  /**
   * Alchemy total xp.
   */
  alchemy_total_xp: number;
  /**
   * The numbers of gold on this character.
   */
  gold: number;
};

export type CharacterLeaderboardType = 'combat' | 'woodcutting' | 'mining' | 'fishing' | 'weaponcrafting' | 'gearcrafting' | 'jewelrycrafting' | 'cooking' | 'alchemy' | 'gold';

export type CharacterLeaderboardType_a_zA_Z0_9_______ = CharacterLeaderboardType;

export type CharacterMovementDataSchema = {
  /**
   * Cooldown details
   */
  cooldown: CooldownSchema;
  /**
   * Destination details.
   */
  destination: MapSchema;
  /**
   * Character details.
   */
  character: CharacterSchema;
};

export type CharacterMovementResponseSchema = {
  data: CharacterMovementDataSchema;
};

export type CharacterResponseSchema = {
  data: CharacterSchema;
};

export type CharacterRestDataSchema = {
  /**
   * Cooldown details
   */
  cooldown: CooldownSchema;
  /**
   * The amount of HP restored.
   */
  hp_restored: number;
  /**
   * Character details.
   */
  character: CharacterSchema;
};

export type CharacterRestResponseSchema = {
  data: CharacterRestDataSchema;
};

export type CharacterSchema = {
  /**
   * Name of the character.
   */
  name: string;
  /**
   * Account name.
   */
  account: string;
  /**
   * Character skin code.
   */
  skin: CharacterSkin;
  /**
   * Combat level.
   */
  level: number;
  /**
   * The current xp level of the combat level.
   */
  xp: number;
  /**
   * XP required to level up the character.
   */
  max_xp: number;
  /**
   * The numbers of gold on this character.
   */
  gold: number;
  /**
   * *Not available, on the roadmap. Character movement speed.
   */
  speed: number;
  /**
   * Mining level.
   */
  mining_level: number;
  /**
   * The current xp level of the Mining skill.
   */
  mining_xp: number;
  /**
   * Mining XP required to level up the skill.
   */
  mining_max_xp: number;
  /**
   * Woodcutting level.
   */
  woodcutting_level: number;
  /**
   * The current xp level of the Woodcutting skill.
   */
  woodcutting_xp: number;
  /**
   * Woodcutting XP required to level up the skill.
   */
  woodcutting_max_xp: number;
  /**
   * Fishing level.
   */
  fishing_level: number;
  /**
   * The current xp level of the Fishing skill.
   */
  fishing_xp: number;
  /**
   * Fishing XP required to level up the skill.
   */
  fishing_max_xp: number;
  /**
   * Weaponcrafting level.
   */
  weaponcrafting_level: number;
  /**
   * The current xp level of the Weaponcrafting skill.
   */
  weaponcrafting_xp: number;
  /**
   * Weaponcrafting XP required to level up the skill.
   */
  weaponcrafting_max_xp: number;
  /**
   * Gearcrafting level.
   */
  gearcrafting_level: number;
  /**
   * The current xp level of the Gearcrafting skill.
   */
  gearcrafting_xp: number;
  /**
   * Gearcrafting XP required to level up the skill.
   */
  gearcrafting_max_xp: number;
  /**
   * Jewelrycrafting level.
   */
  jewelrycrafting_level: number;
  /**
   * The current xp level of the Jewelrycrafting skill.
   */
  jewelrycrafting_xp: number;
  /**
   * Jewelrycrafting XP required to level up the skill.
   */
  jewelrycrafting_max_xp: number;
  /**
   * The current xp level of the Cooking skill.
   */
  cooking_level: number;
  /**
   * Cooking XP.
   */
  cooking_xp: number;
  /**
   * Cooking XP required to level up the skill.
   */
  cooking_max_xp: number;
  /**
   * Alchemy level.
   */
  alchemy_level: number;
  /**
   * Alchemy XP.
   */
  alchemy_xp: number;
  /**
   * Alchemy XP required to level up the skill.
   */
  alchemy_max_xp: number;
  /**
   * Character actual HP.
   */
  hp: number;
  /**
   * Character max HP.
   */
  max_hp: number;
  /**
   * *Character Haste. Increase speed attack (reduce fight cooldown)
   */
  haste: number;
  /**
   * *Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the attack's damage.
   */
  critical_strike: number;
  /**
   * *Not available, on the roadmap. Regenerates life at the start of each turn.
   */
  stamina: number;
  /**
   * Fire attack.
   */
  attack_fire: number;
  /**
   * Earth attack.
   */
  attack_earth: number;
  /**
   * Water attack.
   */
  attack_water: number;
  /**
   * Air attack.
   */
  attack_air: number;
  /**
   * % Fire damage.
   */
  dmg_fire: number;
  /**
   * % Earth damage.
   */
  dmg_earth: number;
  /**
   * % Water damage.
   */
  dmg_water: number;
  /**
   * % Air damage.
   */
  dmg_air: number;
  /**
   * % Fire resistance.
   */
  res_fire: number;
  /**
   * % Earth resistance.
   */
  res_earth: number;
  /**
   * % Water resistance.
   */
  res_water: number;
  /**
   * % Air resistance.
   */
  res_air: number;
  /**
   * Character x coordinate.
   */
  x: number;
  /**
   * Character y coordinate.
   */
  y: number;
  /**
   * Cooldown in seconds.
   */
  cooldown: number;
  /**
   * Datetime Cooldown expiration.
   */
  cooldown_expiration?: string;
  /**
   * Weapon slot.
   */
  weapon_slot: string;
  /**
   * Shield slot.
   */
  shield_slot: string;
  /**
   * Helmet slot.
   */
  helmet_slot: string;
  /**
   * Body armor slot.
   */
  body_armor_slot: string;
  /**
   * Leg armor slot.
   */
  leg_armor_slot: string;
  /**
   * Boots slot.
   */
  boots_slot: string;
  /**
   * Ring 1 slot.
   */
  ring1_slot: string;
  /**
   * Ring 2 slot.
   */
  ring2_slot: string;
  /**
   * Amulet slot.
   */
  amulet_slot: string;
  /**
   * Artifact 1 slot.
   */
  artifact1_slot: string;
  /**
   * Artifact 2 slot.
   */
  artifact2_slot: string;
  /**
   * Artifact 3 slot.
   */
  artifact3_slot: string;
  /**
   * Utility 1 slot.
   */
  utility1_slot: string;
  /**
   * Utility 1 quantity.
   */
  utility1_slot_quantity: number;
  /**
   * Utility 2 slot.
   */
  utility2_slot: string;
  /**
   * Utility 2 quantity.
   */
  utility2_slot_quantity: number;
  /**
   * Task in progress.
   */
  task: string;
  /**
   * Task type.
   */
  task_type: string;
  /**
   * Task progression.
   */
  task_progress: number;
  /**
   * Task total objective.
   */
  task_total: number;
  /**
   * Inventory max items.
   */
  inventory_max_items: number;
  /**
   * List of inventory slots.
   */
  inventory?: Array<InventorySlot>;
};

export type CharacterSkin = 'men1' | 'men2' | 'men3' | 'women1' | 'women2' | 'women3';

export type CooldownSchema = {
  /**
   * The total seconds of the cooldown.
   */
  total_seconds: number;
  /**
   * The remaining seconds of the cooldown.
   */
  remaining_seconds: number;
  /**
   * The start of the cooldown.
   */
  started_at: string;
  /**
   * The expiration of the cooldown.
   */
  expiration: string;
  /**
   * The reason of the cooldown.
   */
  reason: ActionType;
};

export type CraftingSchema = {
  /**
   * Craft code.
   */
  code: string;
  /**
   * Quantity of items to craft.
   */
  quantity?: number;
};

export type CraftSchema = {
  /**
   * Skill required to craft the item.
   */
  skill?: CraftSkill;
  /**
   * The skill level required to craft the item.
   */
  level?: number;
  /**
   * List of items required to craft the item.
   */
  items?: Array<SimpleItemSchema>;
  /**
   * Quantity of items crafted.
   */
  quantity?: number;
};

export type CraftSkill = 'weaponcrafting' | 'gearcrafting' | 'jewelrycrafting' | 'cooking' | 'woodcutting' | 'mining' | 'alchemy';

export type CraftSkill_a_zA_Z0_9_______ = CraftSkill;

export type DataPage_AccountAchievementSchema_ = {
  data: Array<AccountAchievementSchema>;
  total: number | null;
  page: number | null;
  size: number | null;
  pages?: number | null;
};

export type DataPage_AccountLeaderboardSchema_ = {
  data: Array<AccountLeaderboardSchema>;
  total: number | null;
  page: number | null;
  size: number | null;
  pages?: number | null;
};

export type DataPage_AchievementSchema_ = {
  data: Array<AchievementSchema>;
  total: number | null;
  page: number | null;
  size: number | null;
  pages?: number | null;
};

export type DataPage_ActiveEventSchema_ = {
  data: Array<ActiveEventSchema>;
  total: number | null;
  page: number | null;
  size: number | null;
  pages?: number | null;
};

export type DataPage_CharacterLeaderboardSchema_ = {
  data: Array<CharacterLeaderboardSchema>;
  total: number | null;
  page: number | null;
  size: number | null;
  pages?: number | null;
};

export type DataPage_DropRateSchema_ = {
  data: Array<DropRateSchema>;
  total: number | null;
  page: number | null;
  size: number | null;
  pages?: number | null;
};

export type DataPage_EventSchema_ = {
  data: Array<EventSchema>;
  total: number | null;
  page: number | null;
  size: number | null;
  pages?: number | null;
};

export type DataPage_GeOrderHistorySchema_ = {
  data: Array<GeOrderHistorySchema>;
  total: number | null;
  page: number | null;
  size: number | null;
  pages?: number | null;
};

export type DataPage_GEOrderSchema_ = {
  data: Array<GEOrderSchema>;
  total: number | null;
  page: number | null;
  size: number | null;
  pages?: number | null;
};

export type DataPage_ItemSchema_ = {
  data: Array<ItemSchema>;
  total: number | null;
  page: number | null;
  size: number | null;
  pages?: number | null;
};

export type DataPage_LogSchema_ = {
  data: Array<LogSchema>;
  total: number | null;
  page: number | null;
  size: number | null;
  pages?: number | null;
};

export type DataPage_MapSchema_ = {
  data: Array<MapSchema>;
  total: number | null;
  page: number | null;
  size: number | null;
  pages?: number | null;
};

export type DataPage_MonsterSchema_ = {
  data: Array<MonsterSchema>;
  total: number | null;
  page: number | null;
  size: number | null;
  pages?: number | null;
};

export type DataPage_ResourceSchema_ = {
  data: Array<ResourceSchema>;
  total: number | null;
  page: number | null;
  size: number | null;
  pages?: number | null;
};

export type DataPage_SimpleItemSchema_ = {
  data: Array<SimpleItemSchema>;
  total: number | null;
  page: number | null;
  size: number | null;
  pages?: number | null;
};

export type DataPage_TaskFullSchema_ = {
  data: Array<TaskFullSchema>;
  total: number | null;
  page: number | null;
  size: number | null;
  pages?: number | null;
};

export type DeleteCharacterSchema = {
  /**
   * Character name.
   */
  name: string;
};

export type DeleteItemResponseSchema = {
  data: DeleteItemSchema;
};

export type DeleteItemSchema = {
  /**
   * Cooldown details.
   */
  cooldown: CooldownSchema;
  /**
   * Item details.
   */
  item: SimpleItemSchema;
  /**
   * Player details.
   */
  character: CharacterSchema;
};

export type DepositWithdrawGoldSchema = {
  /**
   * Quantity of gold.
   */
  quantity: number;
};

export type DestinationSchema = {
  /**
   * The x coordinate of the destination.
   */
  x: number;
  /**
   * The y coordinate of the destination.
   */
  y: number;
};

export type DropRateSchema = {
  /**
   * Item code.
   */
  code: string;
  /**
   * Chance rate. (1/rate)
   */
  rate: number;
  /**
   * Minimum quantity.
   */
  min_quantity: number;
  /**
   * Maximum quantity.
   */
  max_quantity: number;
};

export type DropSchema = {
  /**
   * The code of the item.
   */
  code: string;
  /**
   * The quantity of the item.
   */
  quantity: number;
};

export type EquipmentResponseSchema = {
  data: EquipRequestSchema;
};

export type EquipRequestSchema = {
  /**
   * Cooldown details.
   */
  cooldown: CooldownSchema;
  /**
   * Item slot.
   */
  slot: ItemSlot;
  /**
   * Item details.
   */
  item: ItemSchema;
  /**
   * Player details.
   */
  character: CharacterSchema;
};

export type EquipSchema = {
  /**
   * Item code.
   */
  code: string;
  /**
   * Item slot.
   */
  slot: ItemSlot;
  /**
   * Item quantity. Applicable to utilitys only.
   */
  quantity?: number;
};

export type EventContentSchema = {
  /**
   * Type of the event.
   */
  type: string;
  /**
   * Code content.
   */
  code: string;
};

export type EventMapSchema = {
  /**
   * Position X of the map.
   */
  x: number;
  /**
   * Position Y of the map.
   */
  y: number;
};

export type EventSchema = {
  /**
   * Name of the event.
   */
  name: string;
  /**
   * Code of the event. This is the event's unique identifier (ID).
   */
  code: string;
  /**
   * Map list of the event.
   */
  maps: Array<EventMapSchema>;
  /**
   * Map skin of the event.
   */
  skin: string;
  /**
   * Duration in minutes.
   */
  duration: number;
  /**
   * Rate spawn of the event. (1/rate every minute)
   */
  rate: number;
  /**
   * Content of the event.
   */
  content: EventContentSchema;
};

export type FightResult = 'win' | 'loss';

export type FightSchema = {
  /**
   * The amount of xp gained by the fight.
   */
  xp: number;
  /**
   * The amount of gold gained by the fight.
   */
  gold: number;
  /**
   * The items dropped by the fight.
   */
  drops: Array<DropSchema>;
  /**
   * Numbers of the turns of the combat.
   */
  turns: number;
  /**
   * The amount of blocked hits by the monster.
   */
  monster_blocked_hits: BlockedHitsSchema;
  /**
   * The amount of blocked hits by the player.
   */
  player_blocked_hits: BlockedHitsSchema;
  /**
   * The fight logs.
   */
  logs: Array<string>;
  /**
   * The result of the fight.
   */
  result: FightResult;
};

export type GatheringSkill = 'mining' | 'woodcutting' | 'fishing' | 'alchemy';

export type GatheringSkill_a_zA_Z0_9_______ = GatheringSkill;

export type GEBuyOrderSchema = {
  /**
   * Order id.
   */
  id: string;
  /**
   * Item quantity.
   */
  quantity: number;
};

export type GECancelOrderSchema = {
  /**
   * Order id.
   */
  id: string;
};

export type GECreateOrderTransactionResponseSchema = {
  data: GEOrderTransactionSchema;
};

export type GEOrderCreatedSchema = {
  /**
   * Order id.
   */
  id: string;
  /**
   * Order created at.
   */
  created_at: string;
  /**
   * Item code.
   */
  code: string;
  /**
   * Item quantity.
   */
  quantity: number;
  /**
   * Item price per unit.
   */
  price: number;
  /**
   * Total price.
   */
  total_price: number;
  /**
   * Order creation tax (5%, minimum 1)
   */
  tax: number;
};

export type GEOrderCreationrSchema = {
  /**
   * Item code.
   */
  code: string;
  /**
   * Item quantity.
   */
  quantity: number;
  /**
   * Item price per unit.
   */
  price: number;
};

export type GeOrderHistorySchema = {
  /**
   * Order id.
   */
  order_id: string;
  /**
   * Seller account name.
   */
  seller: string;
  /**
   * Buyer account name.
   */
  buyer: string;
  /**
   * Item code.
   */
  code: string;
  /**
   * Item quantity.
   */
  quantity: number;
  /**
   * Item price per unit.
   */
  price: number;
  /**
   * Sale datetime.
   */
  sold_at: string;
};

export type GEOrderReponseSchema = {
  data: GEOrderSchema;
};

export type GEOrderSchema = {
  /**
   * Order id.
   */
  id: string;
  /**
   * Seller account name.
   */
  seller: string;
  /**
   * Item code.
   */
  code: string;
  /**
   * Item quantity.
   */
  quantity: number;
  /**
   * Item price per unit.
   */
  price: number;
  /**
   * Order created at.
   */
  created_at: string;
};

export type GEOrderTransactionSchema = {
  /**
   * Cooldown details.
   */
  cooldown: CooldownSchema;
  /**
   * Order details.
   */
  order: GEOrderCreatedSchema;
  /**
   * Character details.
   */
  character: CharacterSchema;
};

export type GETransactionListSchema = {
  /**
   * Cooldown details.
   */
  cooldown: CooldownSchema;
  /**
   * Transaction details.
   */
  order: GETransactionSchema;
  /**
   * Character details.
   */
  character: CharacterSchema;
};

export type GETransactionResponseSchema = {
  data: GETransactionListSchema;
};

export type GETransactionSchema = {
  /**
   * Order id.
   */
  id: string;
  /**
   * Item code.
   */
  code: string;
  /**
   * Item quantity.
   */
  quantity: number;
  /**
   * Item price.
   */
  price: number;
  /**
   * Total price of the transaction.
   */
  total_price: number;
};

export type GoldSchema = {
  /**
   * Quantity of gold.
   */
  quantity: number;
};

export type HTTPValidationError = {
  detail?: Array<ValidationError>;
};

export type InventorySlot = {
  /**
   * Inventory slot identifier.
   */
  slot: number;
  /**
   * Item code.
   */
  code: string;
  /**
   * Quantity in the slot.
   */
  quantity: number;
};

export type ItemEffectSchema = {
  /**
   * Effect name.
   */
  name: string;
  /**
   * Effect value.
   */
  value: number;
};

export type ItemResponseSchema = {
  data: ItemSchema;
};

export type ItemSchema = {
  /**
   * Item name.
   */
  name: string;
  /**
   * Item code. This is the item's unique identifier (ID).
   */
  code: string;
  /**
   * Item level.
   */
  level: number;
  /**
   * Item type.
   */
  type: string;
  /**
   * Item subtype.
   */
  subtype: string;
  /**
   * Item description.
   */
  description: string;
  /**
   * List of object effects. For equipment, it will include item stats.
   */
  effects?: Array<ItemEffectSchema>;
  /**
   * Craft information. If applicable.
   */
  craft?: CraftSchema | null;
  /**
   * Item tradeable status. A non-tradeable item cannot be exchanged or sold.
   */
  tradeable: boolean;
};

export type ItemSlot = 'weapon' | 'shield' | 'helmet' | 'body_armor' | 'leg_armor' | 'boots' | 'ring1' | 'ring2' | 'amulet' | 'artifact1' | 'artifact2' | 'artifact3' | 'utility1' | 'utility2';

export type ItemType = 'utility' | 'body_armor' | 'weapon' | 'resource' | 'leg_armor' | 'helmet' | 'boots' | 'shield' | 'amulet' | 'ring' | 'artifact' | 'currency' | 'consumable';

export type ItemType_a_zA_Z0_9_______ = ItemType;

export type LogSchema = {
  /**
   * Character name.
   */
  character: string;
  /**
   * Account character.
   */
  account: string;
  /**
   * Type of action.
   */
  type: LogType;
  /**
   * Description of action.
   */
  description: string;
  /**
   * Content of action.
   */
  content: unknown;
  /**
   * Cooldown in seconds.
   */
  cooldown: number;
  /**
   * Datetime of cooldown expiration.
   */
  cooldown_expiration: string | null;
  /**
   * Datetime of creation.
   */
  created_at: string;
};

export type LogType =
  | 'spawn'
  | 'movement'
  | 'fight'
  | 'crafting'
  | 'gathering'
  | 'buy_ge'
  | 'sell_ge'
  | 'cancel_ge'
  | 'delete_item'
  | 'deposit'
  | 'withdraw'
  | 'deposit_gold'
  | 'withdraw_gold'
  | 'equip'
  | 'unequip'
  | 'new_task'
  | 'task_exchange'
  | 'task_cancelled'
  | 'task_completed'
  | 'task_trade'
  | 'recycling'
  | 'rest'
  | 'use'
  | 'buy_bank_expansion'
  | 'achievement';

export type MapContentSchema = {
  /**
   * Type of the content.
   */
  type: string;
  /**
   * Code of the content.
   */
  code: string;
};

export type MapContentType = 'monster' | 'resource' | 'workshop' | 'bank' | 'grand_exchange' | 'tasks_master';

export type MapContentType_a_zA_Z0_9_______ = MapContentType;

export type MapResponseSchema = {
  data: MapSchema;
};

export type MapSchema = {
  /**
   * Name of the map.
   */
  name: string;
  /**
   * Skin of the map.
   */
  skin: string;
  /**
   * Position X of the map.
   */
  x: number;
  /**
   * Position Y of the map.
   */
  y: number;
  /**
   * Content of the map.
   */
  content: MapContentSchema | null;
};

export type MonsterResponseSchema = {
  data: MonsterSchema;
};

export type MonsterSchema = {
  /**
   * Name of the monster.
   */
  name: string;
  /**
   * The code of the monster. This is the monster's unique identifier (ID).
   */
  code: string;
  /**
   * Monster level.
   */
  level: number;
  /**
   * Monster hit points.
   */
  hp: number;
  /**
   * Monster fire attack.
   */
  attack_fire: number;
  /**
   * Monster earth attack.
   */
  attack_earth: number;
  /**
   * Monster water attack.
   */
  attack_water: number;
  /**
   * Monster air attack.
   */
  attack_air: number;
  /**
   * Monster % fire resistance.
   */
  res_fire: number;
  /**
   * Monster % earth resistance.
   */
  res_earth: number;
  /**
   * Monster % water resistance.
   */
  res_water: number;
  /**
   * Monster % air resistance.
   */
  res_air: number;
  /**
   * Monster minimum gold drop.
   */
  min_gold: number;
  /**
   * Monster maximum gold drop.
   */
  max_gold: number;
  /**
   * Monster drops. This is a list of items that the monster drops after killing the monster.
   */
  drops: Array<DropRateSchema>;
};

export type MyAccountDetails = {
  /**
   * Username.
   */
  username: string;
  /**
   * Email.
   */
  email: string;
  /**
   * Subscribed for the current season.
   */
  subscribed: boolean;
  /**
   * Member status.
   */
  status: AccountStatus;
  /**
   * Account badges.
   */
  badges?: Array<unknown> | null;
  /**
   * Gems.
   */
  gems: number;
  /**
   * Achievement points.
   */
  achievements_points: number;
  /**
   * Banned.
   */
  banned: boolean;
  /**
   * Ban reason.
   */
  ban_reason?: string;
};

export type MyAccountDetailsSchema = {
  data: MyAccountDetails;
};

export type MyCharactersListSchema = {
  /**
   * List of your characters.
   */
  data: Array<CharacterSchema>;
};

export type RecyclingDataSchema = {
  /**
   * Cooldown details.
   */
  cooldown: CooldownSchema;
  /**
   * Craft details.
   */
  details: RecyclingItemsSchema;
  /**
   * Player details.
   */
  character: CharacterSchema;
};

export type RecyclingItemsSchema = {
  /**
   * Objects received.
   */
  items: Array<DropSchema>;
};

export type RecyclingResponseSchema = {
  data: RecyclingDataSchema;
};

export type RecyclingSchema = {
  /**
   * Item code.
   */
  code: string;
  /**
   * Quantity of items to recycle.
   */
  quantity?: number;
};

export type ResourceResponseSchema = {
  data: ResourceSchema;
};

export type ResourceSchema = {
  /**
   * The name of the resource
   */
  name: string;
  /**
   * The code of the resource. This is the resource's unique identifier (ID).
   */
  code: string;
  /**
   * The skill required to gather this resource.
   */
  skill: GatheringSkill;
  /**
   * The skill level required to gather this resource.
   */
  level: number;
  /**
   * The drops of this resource.
   */
  drops: Array<DropRateSchema>;
};

export type ResponseSchema = {
  message: string;
};

export type SimpleItemSchema = {
  /**
   * Item code.
   */
  code: string;
  /**
   * Item quantity.
   */
  quantity: number;
};

export type Skill = 'weaponcrafting' | 'gearcrafting' | 'jewelrycrafting' | 'cooking' | 'woodcutting' | 'mining' | 'alchemy' | 'fishing';

export type Skill_a_zA_Z0_9_______ = Skill;

export type SkillDataSchema = {
  /**
   * Cooldown details.
   */
  cooldown: CooldownSchema;
  /**
   * Craft details.
   */
  details: SkillInfoSchema;
  /**
   * Player details.
   */
  character: CharacterSchema;
};

export type SkillInfoSchema = {
  /**
   * The amount of xp gained.
   */
  xp: number;
  /**
   * Objects received.
   */
  items: Array<DropSchema>;
};

export type SkillResponseSchema = {
  data: SkillDataSchema;
};

export type StatusResponseSchema = {
  data: StatusSchema;
};

export type StatusSchema = {
  /**
   * Server status
   */
  status: string;
  /**
   * Game version.
   */
  version: string;
  /**
   * Maximum level.
   */
  max_level: number;
  /**
   * Characters online.
   */
  characters_online: number;
  /**
   * Server time.
   */
  server_time: string;
  /**
   * Server announcements.
   */
  announcements: Array<AnnouncementSchema>;
  /**
   * Last server wipe.
   */
  last_wipe: string;
  /**
   * Next server wipe.
   */
  next_wipe: string;
};

export type TaskCancelledResponseSchema = {
  data: TaskCancelledSchema;
};

export type TaskCancelledSchema = {
  /**
   * Cooldown details.
   */
  cooldown: CooldownSchema;
  /**
   * Player details.
   */
  character: CharacterSchema;
};

export type TaskDataSchema = {
  /**
   * Cooldown details.
   */
  cooldown: CooldownSchema;
  /**
   * Task details.
   */
  task: TaskSchema;
  /**
   * Player details.
   */
  character: CharacterSchema;
};

export type TaskFullResponseSchema = {
  data: TaskFullSchema;
};

export type TaskFullSchema = {
  /**
   * Task objective.
   */
  code: string;
  /**
   * Task level.
   */
  level: number;
  /**
   * The type of task.
   */
  type: TaskType;
  /**
   * Minimum amount of task.
   */
  min_quantity: number;
  /**
   * Maximum amount of task.
   */
  max_quantity: number;
  /**
   * Skill required to complete the task.
   */
  skill: string | null;
  /**
   * Rewards.
   */
  rewards: TaskRewardsSchema;
};

export type TaskResponseSchema = {
  data: TaskDataSchema;
};

export type TaskRewardsSchema = {
  /**
   * Items rewards.
   */
  items: Array<SimpleItemSchema>;
  /**
   * Gold rewards.
   */
  gold: number;
};

export type TaskSchema = {
  /**
   * Task objective.
   */
  code: string;
  /**
   * The type of task.
   */
  type: TaskType;
  /**
   * The total required to complete the task.
   */
  total: number;
  /**
   * Rewards for completing the task.
   */
  rewards: TaskRewardsSchema;
};

export type TasksRewardDataResponseSchema = {
  data: TasksRewardDataSchema;
};

export type TasksRewardDataSchema = {
  /**
   * Cooldown details.
   */
  cooldown: CooldownSchema;
  /**
   * Reward details.
   */
  rewards: TaskRewardsSchema;
  /**
   * Player details.
   */
  character: CharacterSchema;
};

export type TasksRewardResponseSchema = {
  data: DropRateSchema;
};

export type TaskTradeDataSchema = {
  /**
   * Cooldown details.
   */
  cooldown: CooldownSchema;
  /**
   * Reward details.
   */
  trade: TaskTradeSchema;
  /**
   * Player details.
   */
  character: CharacterSchema;
};

export type TaskTradeResponseSchema = {
  data: TaskTradeDataSchema;
};

export type TaskTradeSchema = {
  /**
   * Item code.
   */
  code: string;
  /**
   * Item quantity.
   */
  quantity: number;
};

export type TaskType = 'monsters' | 'items';

export type TaskType_a_zA_Z0_9_______ = TaskType;

export type TokenResponseSchema = {
  token: string;
};

export type UnequipSchema = {
  /**
   * Item slot.
   */
  slot: ItemSlot;
  /**
   * Item quantity. Applicable to utilitys only.
   */
  quantity?: number;
};

export type UseItemResponseSchema = {
  data: UseItemSchema;
};

export type UseItemSchema = {
  /**
   * Cooldown details.
   */
  cooldown: CooldownSchema;
  /**
   * Item details.
   */
  item: ItemSchema;
  /**
   * Player details.
   */
  character: CharacterSchema;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type ActionMoveMyNameActionMovePostData = {
  body: DestinationSchema;
  path: {
    /**
     * Name of your character.
     */
    name: string;
  };
};

export type ActionMoveMyNameActionMovePostResponse = CharacterMovementResponseSchema;

export type ActionMoveMyNameActionMovePostError = unknown;

export type ActionRestMyNameActionRestPostData = {
  path: {
    /**
     * Name of your character.
     */
    name: string;
  };
};

export type ActionRestMyNameActionRestPostResponse = CharacterRestResponseSchema;

export type ActionRestMyNameActionRestPostError = unknown;

export type ActionEquipItemMyNameActionEquipPostData = {
  body: EquipSchema;
  path: {
    /**
     * Name of your character.
     */
    name: string;
  };
};

export type ActionEquipItemMyNameActionEquipPostResponse = EquipmentResponseSchema;

export type ActionEquipItemMyNameActionEquipPostError = unknown;

export type ActionUnequipItemMyNameActionUnequipPostData = {
  body: UnequipSchema;
  path: {
    /**
     * Name of your character.
     */
    name: string;
  };
};

export type ActionUnequipItemMyNameActionUnequipPostResponse = EquipmentResponseSchema;

export type ActionUnequipItemMyNameActionUnequipPostError = unknown;

export type ActionUseItemMyNameActionUsePostData = {
  body: SimpleItemSchema;
  path: {
    /**
     * Name of your character.
     */
    name: string;
  };
};

export type ActionUseItemMyNameActionUsePostResponse = UseItemResponseSchema;

export type ActionUseItemMyNameActionUsePostError = unknown;

export type ActionFightMyNameActionFightPostData = {
  path: {
    /**
     * Name of your character.
     */
    name: string;
  };
};

export type ActionFightMyNameActionFightPostResponse = CharacterFightResponseSchema;

export type ActionFightMyNameActionFightPostError = unknown;

export type ActionGatheringMyNameActionGatheringPostData = {
  path: {
    /**
     * Name of your character.
     */
    name: string;
  };
};

export type ActionGatheringMyNameActionGatheringPostResponse = SkillResponseSchema;

export type ActionGatheringMyNameActionGatheringPostError = unknown;

export type ActionCraftingMyNameActionCraftingPostData = {
  body: CraftingSchema;
  path: {
    /**
     * Name of your character.
     */
    name: string;
  };
};

export type ActionCraftingMyNameActionCraftingPostResponse = SkillResponseSchema;

export type ActionCraftingMyNameActionCraftingPostError = unknown;

export type ActionDepositBankGoldMyNameActionBankDepositGoldPostData = {
  body: DepositWithdrawGoldSchema;
  path: {
    /**
     * Name of your character.
     */
    name: string;
  };
};

export type ActionDepositBankGoldMyNameActionBankDepositGoldPostResponse = BankGoldTransactionResponseSchema;

export type ActionDepositBankGoldMyNameActionBankDepositGoldPostError = unknown;

export type ActionDepositBankMyNameActionBankDepositPostData = {
  body: SimpleItemSchema;
  path: {
    /**
     * Name of your character.
     */
    name: string;
  };
};

export type ActionDepositBankMyNameActionBankDepositPostResponse = BankItemTransactionResponseSchema;

export type ActionDepositBankMyNameActionBankDepositPostError = unknown;

export type ActionWithdrawBankMyNameActionBankWithdrawPostData = {
  body: SimpleItemSchema;
  path: {
    /**
     * Name of your character.
     */
    name: string;
  };
};

export type ActionWithdrawBankMyNameActionBankWithdrawPostResponse = BankItemTransactionResponseSchema;

export type ActionWithdrawBankMyNameActionBankWithdrawPostError = unknown;

export type ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostData = {
  body: DepositWithdrawGoldSchema;
  path: {
    /**
     * Name of your character.
     */
    name: string;
  };
};

export type ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostResponse = BankGoldTransactionResponseSchema;

export type ActionWithdrawBankGoldMyNameActionBankWithdrawGoldPostError = unknown;

export type ActionBuyBankExpansionMyNameActionBankBuyExpansionPostData = {
  path: {
    /**
     * Name of your character.
     */
    name: string;
  };
};

export type ActionBuyBankExpansionMyNameActionBankBuyExpansionPostResponse = BankExtensionTransactionResponseSchema;

export type ActionBuyBankExpansionMyNameActionBankBuyExpansionPostError = unknown;

export type ActionRecyclingMyNameActionRecyclingPostData = {
  body: RecyclingSchema;
  path: {
    /**
     * Name of your character.
     */
    name: string;
  };
};

export type ActionRecyclingMyNameActionRecyclingPostResponse = RecyclingResponseSchema;

export type ActionRecyclingMyNameActionRecyclingPostError = unknown;

export type ActionGeBuyItemMyNameActionGrandexchangeBuyPostData = {
  body: GEBuyOrderSchema;
  path: {
    /**
     * Name of your character.
     */
    name: string;
  };
};

export type ActionGeBuyItemMyNameActionGrandexchangeBuyPostResponse = GETransactionResponseSchema;

export type ActionGeBuyItemMyNameActionGrandexchangeBuyPostError = unknown;

export type ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostData = {
  body: GEOrderCreationrSchema;
  path: {
    /**
     * Name of your character.
     */
    name: string;
  };
};

export type ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostResponse = GECreateOrderTransactionResponseSchema;

export type ActionGeCreateSellOrderMyNameActionGrandexchangeSellPostError = unknown;

export type ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostData = {
  body: GECancelOrderSchema;
  path: {
    /**
     * Name of your character.
     */
    name: string;
  };
};

export type ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostResponse = GETransactionResponseSchema;

export type ActionGeCancelSellOrderMyNameActionGrandexchangeCancelPostError = unknown;

export type ActionCompleteTaskMyNameActionTaskCompletePostData = {
  path: {
    /**
     * Name of your character.
     */
    name: string;
  };
};

export type ActionCompleteTaskMyNameActionTaskCompletePostResponse = TasksRewardDataResponseSchema;

export type ActionCompleteTaskMyNameActionTaskCompletePostError = unknown;

export type ActionTaskExchangeMyNameActionTaskExchangePostData = {
  path: {
    /**
     * Name of your character.
     */
    name: string;
  };
};

export type ActionTaskExchangeMyNameActionTaskExchangePostResponse = TasksRewardDataResponseSchema;

export type ActionTaskExchangeMyNameActionTaskExchangePostError = unknown;

export type ActionAcceptNewTaskMyNameActionTaskNewPostData = {
  path: {
    /**
     * Name of your character.
     */
    name: string;
  };
};

export type ActionAcceptNewTaskMyNameActionTaskNewPostResponse = TaskResponseSchema;

export type ActionAcceptNewTaskMyNameActionTaskNewPostError = unknown;

export type ActionTaskTradeMyNameActionTaskTradePostData = {
  body: SimpleItemSchema;
  path: {
    /**
     * Name of your character.
     */
    name: string;
  };
};

export type ActionTaskTradeMyNameActionTaskTradePostResponse = TaskTradeResponseSchema;

export type ActionTaskTradeMyNameActionTaskTradePostError = unknown;

export type ActionTaskCancelMyNameActionTaskCancelPostData = {
  path: {
    /**
     * Name of your character.
     */
    name: string;
  };
};

export type ActionTaskCancelMyNameActionTaskCancelPostResponse = TaskCancelledResponseSchema;

export type ActionTaskCancelMyNameActionTaskCancelPostError = unknown;

export type ActionDeleteItemMyNameActionDeletePostData = {
  body: SimpleItemSchema;
  path: {
    /**
     * Name of your character.
     */
    name: string;
  };
};

export type ActionDeleteItemMyNameActionDeletePostResponse = DeleteItemResponseSchema;

export type ActionDeleteItemMyNameActionDeletePostError = unknown;

export type GetAllCharactersLogsMyLogsGetData = {
  query?: {
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
  };
};

export type GetAllCharactersLogsMyLogsGetResponse = DataPage_LogSchema_;

export type GetAllCharactersLogsMyLogsGetError = unknown;

export type GetMyCharactersMyCharactersGetResponse = MyCharactersListSchema;

export type GetMyCharactersMyCharactersGetError = unknown;

export type GetBankDetailsMyBankGetResponse = BankResponseSchema;

export type GetBankDetailsMyBankGetError = unknown;

export type GetBankItemsMyBankItemsGetData = {
  query?: {
    /**
     * Item to search in your bank.
     */
    item_code?: string;
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
  };
};

export type GetBankItemsMyBankItemsGetResponse = DataPage_SimpleItemSchema_;

export type GetBankItemsMyBankItemsGetError = unknown;

export type GetGeSellOrdersMyGrandexchangeOrdersGetData = {
  query?: {
    /**
     * The code of the item.
     */
    code?: string;
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
  };
};

export type GetGeSellOrdersMyGrandexchangeOrdersGetResponse = DataPage_GEOrderSchema_;

export type GetGeSellOrdersMyGrandexchangeOrdersGetError = unknown;

export type GetGeSellHistoryMyGrandexchangeHistoryGetData = {
  query?: {
    /**
     * Item to search in your history.
     */
    code?: string;
    /**
     * Order ID to search in your history.
     */
    id?: string;
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
  };
};

export type GetGeSellHistoryMyGrandexchangeHistoryGetResponse = DataPage_GeOrderHistorySchema_;

export type GetGeSellHistoryMyGrandexchangeHistoryGetError = unknown;

export type GetAccountDetailsMyDetailsGetResponse = MyAccountDetailsSchema;

export type GetAccountDetailsMyDetailsGetError = unknown;

export type ChangePasswordMyChangePasswordPostData = {
  body: ChangePassword;
};

export type ChangePasswordMyChangePasswordPostResponse = ResponseSchema;

export type ChangePasswordMyChangePasswordPostError = unknown;

export type CreateCharacterCharactersCreatePostData = {
  body: AddCharacterSchema;
};

export type CreateCharacterCharactersCreatePostResponse = CharacterResponseSchema;

export type CreateCharacterCharactersCreatePostError = unknown;

export type DeleteCharacterCharactersDeletePostData = {
  body: DeleteCharacterSchema;
};

export type DeleteCharacterCharactersDeletePostResponse = CharacterResponseSchema;

export type DeleteCharacterCharactersDeletePostError = unknown;

export type GetCharacterCharactersNameGetData = {
  path: {
    /**
     * The character name.
     */
    name: string;
  };
};

export type GetCharacterCharactersNameGetResponse = CharacterResponseSchema;

export type GetCharacterCharactersNameGetError = unknown;

export type GetAllMapsMapsGetData = {
  query?: {
    /**
     * Content code on the map.
     */
    content_code?: string;
    /**
     * Type of content on the map.
     */
    content_type?: MapContentType;
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
  };
};

export type GetAllMapsMapsGetResponse = DataPage_MapSchema_;

export type GetAllMapsMapsGetError = unknown;

export type XY = {
  x: number;
  y: number;
};

export type GetMapMapsXyGetData = {
  path: {
    /**
     * The position x of the map.
     */
    x: number;
    /**
     * The position X of the map.
     */
    y: number;
  };
};

export type GetMapMapsXyGetResponse = MapResponseSchema;

export type GetMapMapsXyGetError = unknown;

export type GetAllItemsItemsGetData = {
  query?: {
    /**
     * Item code of items used as material for crafting.
     */
    craft_material?: string;
    /**
     * Skill to craft items.
     */
    craft_skill?: CraftSkill;
    /**
     * Maximum level items.
     */
    max_level?: number;
    /**
     * Minimum level items.
     */
    min_level?: number;
    /**
     * Name of the item.
     */
    name?: string;
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
    /**
     * Type of items.
     */
    type?: ItemType;
  };
};

export type GetAllItemsItemsGetResponse = DataPage_ItemSchema_;

export type GetAllItemsItemsGetError = unknown;

export type GetItemItemsCodeGetData = {
  path: {
    /**
     * The code of the item.
     */
    code: string;
  };
};

export type GetItemItemsCodeGetResponse = ItemResponseSchema;

export type GetItemItemsCodeGetError = unknown;

export type GetAllMonstersMonstersGetData = {
  query?: {
    /**
     * Item code of the drop.
     */
    drop?: string;
    /**
     * Monster maximum level.
     */
    max_level?: number;
    /**
     * Monster minimum level.
     */
    min_level?: number;
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
  };
};

export type GetAllMonstersMonstersGetResponse = DataPage_MonsterSchema_;

export type GetAllMonstersMonstersGetError = unknown;

export type GetMonsterMonstersCodeGetData = {
  path: {
    /**
     * The code of the monster.
     */
    code: string;
  };
};

export type GetMonsterMonstersCodeGetResponse = MonsterResponseSchema;

export type GetMonsterMonstersCodeGetError = unknown;

export type GetAllResourcesResourcesGetData = {
  query?: {
    /**
     * Item code of the drop.
     */
    drop?: string;
    /**
     * Skill maximum level.
     */
    max_level?: number;
    /**
     * Skill minimum level.
     */
    min_level?: number;
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
    /**
     * The code of the skill.
     */
    skill?: GatheringSkill;
  };
};

export type GetAllResourcesResourcesGetResponse = DataPage_ResourceSchema_;

export type GetAllResourcesResourcesGetError = unknown;

export type GetResourceResourcesCodeGetData = {
  path: {
    /**
     * The code of the resource.
     */
    code: string;
  };
};

export type GetResourceResourcesCodeGetResponse = ResourceResponseSchema;

export type GetResourceResourcesCodeGetError = unknown;

export type GetAllActiveEventsEventsActiveGetData = {
  query?: {
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
  };
};

export type GetAllActiveEventsEventsActiveGetResponse = DataPage_ActiveEventSchema_;

export type GetAllActiveEventsEventsActiveGetError = unknown;

export type GetAllEventsEventsGetData = {
  query?: {
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
  };
};

export type GetAllEventsEventsGetResponse = DataPage_EventSchema_;

export type GetAllEventsEventsGetError = unknown;

export type GetGeSellHistoryGrandexchangeHistoryCodeGetData = {
  path: {
    /**
     * The code of the item.
     */
    code: string;
  };
  query?: {
    /**
     * The buyer (account name) of the item.
     */
    buyer?: string;
    /**
     * Page number
     */
    page?: number;
    /**
     * The seller (account name) of the item.
     */
    seller?: string;
    /**
     * Page size
     */
    size?: number;
  };
};

export type GetGeSellHistoryGrandexchangeHistoryCodeGetResponse = DataPage_GeOrderHistorySchema_;

export type GetGeSellHistoryGrandexchangeHistoryCodeGetError = unknown;

export type GetGeSellOrdersGrandexchangeOrdersGetData = {
  query?: {
    /**
     * The code of the item.
     */
    code?: string;
    /**
     * Page number
     */
    page?: number;
    /**
     * The seller (account name) of the item.
     */
    seller?: string;
    /**
     * Page size
     */
    size?: number;
  };
};

export type GetGeSellOrdersGrandexchangeOrdersGetResponse = DataPage_GEOrderSchema_;

export type GetGeSellOrdersGrandexchangeOrdersGetError = unknown;

export type GetGeSellOrderGrandexchangeOrdersIdGetData = {
  path: {
    /**
     * The id of the order.
     */
    id: string;
  };
};

export type GetGeSellOrderGrandexchangeOrdersIdGetResponse = GEOrderReponseSchema;

export type GetGeSellOrderGrandexchangeOrdersIdGetError = unknown;

export type GetAllTasksTasksListGetData = {
  query?: {
    /**
     * Maximum level.
     */
    max_level?: number;
    /**
     * Minimum level.
     */
    min_level?: number;
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
    /**
     * The code of the skill.
     */
    skill?: Skill;
    /**
     * The type of tasks.
     */
    type?: TaskType;
  };
};

export type GetAllTasksTasksListGetResponse = DataPage_TaskFullSchema_;

export type GetAllTasksTasksListGetError = unknown;

export type GetTaskTasksListCodeGetData = {
  path: {
    /**
     * The code of the task.
     */
    code: string;
  };
};

export type GetTaskTasksListCodeGetResponse = TaskFullResponseSchema;

export type GetTaskTasksListCodeGetError = unknown;

export type GetAllTasksRewardsTasksRewardsGetData = {
  query?: {
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
  };
};

export type GetAllTasksRewardsTasksRewardsGetResponse = DataPage_DropRateSchema_;

export type GetAllTasksRewardsTasksRewardsGetError = unknown;

export type GetTasksRewardTasksRewardsCodeGetData = {
  path: {
    /**
     * The code of the tasks reward.
     */
    code: string;
  };
};

export type GetTasksRewardTasksRewardsCodeGetResponse = TasksRewardResponseSchema;

export type GetTasksRewardTasksRewardsCodeGetError = unknown;

export type GetAllAchievementsAchievementsGetData = {
  query?: {
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
    /**
     * Type of achievements.
     */
    type?: AchievementType;
  };
};

export type GetAllAchievementsAchievementsGetResponse = DataPage_AchievementSchema_;

export type GetAllAchievementsAchievementsGetError = unknown;

export type GetAchievementAchievementsCodeGetData = {
  path: {
    /**
     * The code of the achievement.
     */
    code: string;
  };
};

export type GetAchievementAchievementsCodeGetResponse = AchievementResponseSchema;

export type GetAchievementAchievementsCodeGetError = unknown;

export type GetCharactersLeaderboardLeaderboardCharactersGetData = {
  query?: {
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
    /**
     * Default sort by combat total XP.
     */
    sort?: CharacterLeaderboardType;
  };
};

export type GetCharactersLeaderboardLeaderboardCharactersGetResponse = DataPage_CharacterLeaderboardSchema_;

export type GetCharactersLeaderboardLeaderboardCharactersGetError = unknown;

export type GetAccountsLeaderboardLeaderboardAccountsGetData = {
  query?: {
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
    /**
     * Default sort by achievements points.
     */
    sort?: AccountLeaderboardType;
  };
};

export type GetAccountsLeaderboardLeaderboardAccountsGetResponse = DataPage_AccountLeaderboardSchema_;

export type GetAccountsLeaderboardLeaderboardAccountsGetError = unknown;

export type CreateAccountAccountsCreatePostData = {
  body: AddAccountSchema;
};

export type CreateAccountAccountsCreatePostResponse = ResponseSchema;

export type CreateAccountAccountsCreatePostError = unknown;

export type GetAccountAchievementsAccountsAccountAchievementsGetData = {
  path: {
    /**
     * The character name.
     */
    account: string;
  };
  query?: {
    /**
     * Filter by completed achievements.
     */
    completed?: boolean;
    /**
     * Page number
     */
    page?: number;
    /**
     * Page size
     */
    size?: number;
    /**
     * Type of achievements.
     */
    type?: AchievementType;
  };
};

export type GetAccountAchievementsAccountsAccountAchievementsGetResponse = DataPage_AccountAchievementSchema_;

export type GetAccountAchievementsAccountsAccountAchievementsGetError = unknown;

export type GetAccountAccountsAccountGetData = {
  path: {
    /**
     * The account name.
     */
    account: string;
  };
};

export type GetAccountAccountsAccountGetResponse = AccountDetailsSchema;

export type GetAccountAccountsAccountGetError = unknown;

export type GenerateTokenTokenPostResponse = TokenResponseSchema;

export type GenerateTokenTokenPostError = unknown;

export type GetStatusGetResponse = StatusResponseSchema;

export type GetStatusGetError = unknown;

export type ErrorResponseSchema = {
  error: {
    code: number;
    message: string;
  };
};
